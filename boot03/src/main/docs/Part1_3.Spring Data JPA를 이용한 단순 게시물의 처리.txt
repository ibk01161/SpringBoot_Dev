#3. Spring Data JPA를 이용한 단순 게시물의 처리 (boot03)

* 쿼리 연습을 위한 준비
- JPA에서는 각 데이터베이스에 맞는 Dialect가 별도의 SQL에 대한 처리를 자동으로 처리해 주기 때문에 개발 시 생산성을 향상시킬 수 있음
- 반면 조금 복잡한 쿼리를 작성하기 위해서는 데이터베이스를 대상으로 하는 SQL이 아니라 JPA에서 사용하는 Named Query나 JPQL(Java Persistence Query Language), Query dsl 이라는 것을 학습해야 함
- 쿼리 메소드는 메소드의 이름만으로 필요한 쿼리를 만들어 내는 기능으로, 별도의 학습 없이 몇 가지 네이밍 룰만 알고 있어도 사용 가능
- 새 프로젝트 만들고 필요한 더미 테이터 생성

1) 쿼리 메소드 이용하기
- Spring Data JPA는 메소드의 이름만으로 원하는 질의(Query)를 실행할 수 있는 방법을 제공, 이때 쿼리라는 용어는 'select'에만 해당 (find..By.., read..By.., query..By.., get..By.., count..By..)
- 예를 들어 'find..By..'로 쿼리 메소드를 작성한다면 'find' 뒤에 엔티티 타입을 지정, Boar 클래스라면 'findBoardBy...' 가 됨, 만약 중간에 엔티티타입을 지정하지 않으면 현재 실행하는 Repository의 타입 정보를 기준으로 동작하게 됨
- 'By' 뒤쪽은 칼럼명을 이용해 구성, 예를 들어 제목으로 검색하고자 한다면 'findBoardByTitle'이 됨
- 쿼리 메소드의 리턴 타입은 Page<T>, Slice<T>, List<T>와 같은 Collection<T> 형태가 될 수 있는데 가장 많이 사용되는 것은 List<T>, Page<T> 타입임
- 쿼리 메소드를 생성하고 실행시켜 보면 콘솔에 'from tbl_boards board0_ where board0_.title=?' 와 같은 형태로 작성되는 것을 확인
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.title=?
Board(bno=177, title=제목..177, writer=user07, content=내용..177, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)

* findBy를 이용한 특정 컬럼 처리
- SQL문에서 특정한 컬럼의 값을 조회할 때는 쿼리 메소드의 이름을 findBy로 시작하는 방식을 이용 => Collection<T> findBy + 속성 이름(속성 타입)
- 예를 들어 '게시물에서 user00이라는 작성자의 모든 데이터를 구한다.' 라는 기능을 BoardRepository에 추가한다면 => Collection<Board> findByWriter(String writer)
- findBy... 로 시작하는 쿼리 메소드는 지정하는 속성의 값에 따라 파라미터의 타입이 결정, Board 클래스에서 writer속성의 값이 문자열이기 때문에 파라미터 타입은 String으로 지정
- findBy... 로 시작하는 쿼리 메소드의 리턴 타입은 Collection으로 설계하면 되기 때문에 forEach구문 이용해서 데이터 출력
- 테스트 코드를 실행하면 where문 뒤에 writer 칼럼을 검색하는 코드가 출력 (from tbl_boards board0_ where board0_.writer=?)
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.writer=?
Board(bno=10, title=제목..10, writer=user00, content=내용..10, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
Board(bno=20, title=제목..20, writer=user00, content=내용..20, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
....

* like 구문 처리 (쿼리 메소드)
- findBy와 더불어 가장 많이 사용하는 구문
- like에 대한 처리는 단순한 like, 키워드 + '%', '%' + 키워드, '%' + 키워드 + '%' 와 같은 4가지 형태 사용
1) 단순 like => Like
2) 키워드 + '%' => StartingWith
3) '%' + 키워드 => EndingWith
4) '%' + 키워드 + '%' => Containing
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.writer like ? escape ?
Board(bno=5, title=제목..5, writer=user05, content=내용..5, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
Board(bno=15, title=제목..15, writer=user05, content=내용..15, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
....

* and 혹은 or 조건처리
- 경우에 따라 2개 이상의 속성을 이용해서 엔티티를 검색해야 할 때는 'And'와 'Or'을 사용, 속성이 두 개 이상일 때는 파라미터 역시 지정한 속성의 수 만큼 맞춰줘야 함
- 예를 들어, 게시글의 title과 content속성에 특정한 문자열이 들어있는 게시물을 검색하려면 => 'findBy' + 'TitleContaining' + 'Or' + 'ContentContaining'과 같은 형태가 됨

* 부등호 처리
- 쿼리 메소드에서는 '>' 와 '<' 같은 부등호는 'GreaterThan' 와 LessThan'을 이용해 처리
- 예를 들어, 게시물의 title에 특정한 문자가 포함되어 있고, bno가 특정 숫자 초과인 데이터 조회 => Collection<Board> findByTitleContainingAndBnoGreaterThan
- 테스트를 실행하면 SQL 상에서 '>'가 만들어짐 (from tbl_boards board0_ where (board0_.title like ? escape ?) and board0_.bno>?)
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where (board0_.title like ? escape ?) and board0_.bno>?
Board(bno=105, title=제목..105, writer=user05, content=내용..105, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=115, title=제목..115, writer=user05, content=내용..115, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
...

* order by 처리
- 가져오는 데이터의 순서를 지정하기 위해서 'OrderBy' + 속성 + 'Asc or Desc'를 이용해서 작성
- 예를 들어, 게시물의 bno가 특정 번호보다 큰 게시물을 bno 값의 역순으로 처리하고 싶으면 => Collection<Board> findByBnoGreaterThanOrderByBnoDesc(Long bno)
- 테스트를 실행하면 SQL 상에서 order by 적용 (from tbl_boards board0_ where board0_.bno>? order by board0_.bno desc) 
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.bno>? order by board0_.bno desc
Board(bno=200, title=제목..200, writer=user00, content=내용..200, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=199, title=제목..199, writer=user09, content=내용..199, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
...

* 페이징 처리와 정렬
- 쿼리 메소드들에는 특이하게 모든 쿼리 메소드의 마지막 파라미터로 페이지 처리를 할 수 있는 Pageable 인터페이스와 정렬을 처리하는 Sort 인터페이스를 사용할 수 있음
- Pageable 인터페이스는 말 그대로 페이징 처리에 필요한 정보를 제공, 보통 가장 많이 사용하는 것은 Pageable 인터페이스를 구현한 클래스 중 PageRequest 클래스를 이용
- 예를 들어, bno가 0보다 크고, 내림차순 => List<Board> findByBnoGreaterThanOrderByBnoDesc(Long bno, Pageable paging)
- 기존 코드와 차이점은 파라미터에 Pageable이 적용되어 있고, 리턴 타입으로 List<> 적용, Pageable 인터페이스가 적용된 경우, 리턴 타입은 Slice 타입, Page 타입, List 타입을 사용해야 함
- 테스트 시 Pageable 인터페이스에는 여러 메소드가 존재하기 때문에 이를 구현하는 대신 PageRequest 클래스를 이용한는 것이 편리(여러 종류의 생성자 지원)
- 그 중 가장 간단한 방법은 페이지 번호와 페이지당 데이터의 수를 지정하는 방식(PageRequest.of(0,10)은 첫 번째 페이지 이고 10건의 데이터를 가져오도록 설정)
- 테스트를 실행하면 SQL 상에서 MySQL이기 때문에 자동으로 limit가 적용 (from tbl_boards board0_ where board0_.bno>? order by board0_.bno desc limit ?)
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.bno>? order by board0_.bno desc limit ?
Board(bno=200, title=제목..200, writer=user00, content=내용..200, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=199, title=제목..199, writer=user09, content=내용..199, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
...

- 정렬 처리에는 Pageable 인터페이스와 같이 Sort 클래스 이용, Sort는 쿼리 메소드에서 OrderBy로 처리해도 되지만, Sort를 이용하면 원하는 방향을 파라미터로 결정할 수 있다는 장점이 있음
** PageRequest의 of() 기능
1) PageRequest.of(int page, int size) - 페이지 번호(0부터 시작), 페이지당 데이터의 수
2) PageRequest.of(int page, int size, Sort.Direction direction, String... props) - 페이지 번호, 페이지당 데이터 수, 정렬 방향, 속성(칼럼) 들
3) pageRequest.of(int page, int size, Sort sort) - 페이지 번호, 페이지당 데이터 수, 정렬 방향
- PageRequest의 생성자 중에 Sort 인터페이스 타입을 파라미터로 전달할 수 있는 생성자가 있는데, 이를 이용하면 페이징 처리와 정렬에 대한 처리를 동시에 지정할 수 있음
- 쿼리 메소드에서 OrderBy 부분 없이 Pageable만 파라미터로 처리 => List<Board> findByBnoGreaterThan(Long bno, Pageable paging)
- 테스트 시 메소드의 이름에서 정렬과 관련된 조건이 빠진 것은 PageRequest()를 이용해 처리 가능 (where board0_.bno>? order by board0_.bno asc limit ?)
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.bno>? order by board0_.bno asc limit ?
Board(bno=1, title=제목..1, writer=user01, content=내용..1, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
Board(bno=2, title=제목..2, writer=user02, content=내용..2, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
...

* Page<T> 타입
- Spring Data JPA 에서 결과 데이터가 여러개인 경우 List<T> 타입을 이용하기도 하지만, Page<T>타입을 이용하면 Spring MVC와 연동할 때 편리함
- Page<T>는 단순 데이터만 추출하는 용도가 아니라, 흔히 웹에서 필요한 데이터들을 추가적으로 처리해 줌
- 테스트 코드를 실행하면 실제로 SQL문이 두 번 실행됨, 처음에는 데이터를 추출하기 위해 실행 (select), 두 번째는 데이터 개수 파악 (select count...)하기 위해 실행
- 리턴 타입을 Page<T>로 하게 되면 웹 페이징에서 필요한 데이터를 한 번에 처리할 수 있기 때문에 데이터를 위한 SQL과 개수를 파악하기 위한 SQL을 매번 작성하는 불편함 사라짐
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.bno>? order by board0_.bno asc limit ?
Hibernate: select count(board0_.bno) as col_0_0_ from tbl_boards board0_ where board0_.bno>?
PAGE SIZE : 10
TOTAL SIZE : 20
TOTAL COUNT : 200
NEXT : Page request [number: 1, size 10, sort: bno: ASC]
Board(bno=1, title=제목..1, writer=user01, content=내용..1, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
Board(bno=2, title=제목..2, writer=user02, content=내용..2, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
....

2) @Query를 이용하기
- 일반적으로 데이터베이스를 이용해서 쿼리를 수행할 때 실행계획(Execute Plan)이라는 것을 참고
- 실행계획은 데이터베이스상에서 해당 SQL이 어떤 방식으로 실행 되는지 말해줌
- SQL을 작성할 때에는 보다 최적화된 실행계획을 세울 수 있도록 SQL문을 조정할 필요가 있음 (where bno > 0 조건을 주는것과 안주는것), 조건을 주지 않으면 테이블 전체를 스캔, 주면 PK를 이용해 데이터를 검색함
- 좀 더 구체적인 조건 등을 지정하기 위해 Spring Data JPA는 쿼리 메소드 대신 @Query(쿼리 어노테이션)를 이용할 수 있음
- @Query를 이용하면 말 그대로 어노테이션 안에 쿼리를 작성하게 됨, 이때 쿼리는 JPQL 이라는 JPA에서 사용하는 쿼리 문법을 이용하거나, 순수한 데이터베이스에 맞는 SQL을 사용할 수 있음

* 단순 게시물의 처리를 위한 @Query 작성
- 검색처리를 이용한 예제 실행

* 제목에 대한 검색 처리
- @Query에는 JPQL(객체 쿼리)을 이용, JPQL은 JPA에서 사용하는 쿼리언어, SQL과 유사한 구문들로 구성, JPA의 구현체에서 이를 해석해서 실행
- 테이블 대신 엔티티 타입을 이용하고, 칼럼명 대신 엔티티의 속성을 이용, SQL에서 많이 사용하는 order by나 group by 등은 지원
- @Query의 내용 중 '%?1%' 는 ?는 JDBC상에서 PreparedStatement에서 사용한 것과 동일하고, '?1'은 첫 번째로 전달되는 파라미터
- 제목에 '17'이라는 문자열이 들어간 게시물 검색으로 테스트, 실행 결과를 보면 bno의 역순으로 처리된 것을 확인
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where (board0_.title like ?) and board0_.bno>0 order by board0_.bno DESC
Board(bno=179, title=제목..179, writer=user09, content=내용..179, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=178, title=제목..178, writer=user08, content=내용..178, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
...

* 내용에 대한 검색 처리 (@Param)
- 내용 검색 처리 역시 제목 검색 처리와 동일한 방식으로 처리 (@Param을 적용할 수 있으므로 이를 이용해 예제 작성)
- 기존 검색 처리 결과와 달리 '%:content%' 와 같이 처리, 파라미터에서는 @Param 어노테이션 이용
- @Param을 통해 여러 개의 파라미터를 전달할 때 이름을 이용해 쉽게 구분해 전달 가능
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where (board0_.content like ?) and board0_.bno>0 order by board0_.bno DESC
Board(bno=199, title=제목..199, writer=user09, content=내용..199, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=198, title=제목..198, writer=user08, content=내용..198, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
...

* 작성자에 대한 검색 처리 (#{#entityName})
- 앞서 살펴본 두 가지 검색 방식을 이용해 작성 가능
- 예제에서는 Repository의 엔티티 타입을 자동으로 사용하는 코드를 작성하고 있음
- #{#entityName}은 Repository 인터페이스를 정의할 때 <엔티티 타입, PK 타입>에서 엔티티 타입을 자동으로 참고
- 지금 같이 단순한 예제에서는 쓸모 없지만 유사한 상속 구조의 Repository 인터페이스를 여러 개 생성하는 경우라면 유용하게 사용할 수 있음
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where (board0_.writer like ?) and board0_.bno>0 order by board0_.bno DESC
Board(bno=199, title=제목..199, writer=user09, content=내용..199, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=189, title=제목..189, writer=user09, content=내용..189, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
...

* @Query의 활용
- 장점
1) 리턴 값이 반드시 엔티티 타입이 아니라 필요한 몇 개의 칼럼 값들만 추출 할 수 있음
- 엔티티 타입의 경우 테이블의 모든 칼럼을 조회하지만, JPQL을 이용하면 필요한 몇 개의 컬럼들만 조회 할 수 있음
2) nativeQuery 속성을 지정해서 데이터베이스에 사용하는 SQL을 그대로 사용할 수 있음
- SQL 자체를 그대로 사용하고 싶을 때나 별도 SQL에 대한 튜닝이 이루어진 경우 유용하게 사용할 수 있음
3) Repository에 지정된 엔티티 타입 뿐 아니라 필요한 엔티티 타입을 다양하게 사용할 수 있음
- JPQL의 경우 여러 엔티티 타입을 조회할 수 있기 때문에 한 번에 여러 엔티티 타입을 조회하는 경우에 유용 (댓글 처리 예제 참고)

* @Query의 활용_필요 컬럼만 추출하는 경우
- @Query를 이용하면 'select'로 시작하는 JPQL 구문을 작성하는데, 이떄 필요 컬럼만 추출 할 수 있음
- 특이점은 리턴 타입이 엔티티 타입이 아니라 Object[]의 리스트 형태로 작성
- @Query를 이용할 떄 주의점은 @Query에 대한 해석이 프로젝트 로딩 시점에 이루어짐
=> @Query의 내용은 프로젝트가 시작되면서 검증되기 때문에 만일 @Query의 내용물이 잘못된 경우에는 프로젝트가 정상적으로 실행되지 않음, 가능한 @Query를 하나씩 작성하고 프로젝트를 실행하는 과정을 거치는게 좋음
[log]
Hibernate: select board0_.bno as col_0_0_, board0_.title as col_1_0_, board0_.writer as col_2_0_, board0_.regdate as col_3_0_ from tbl_boards board0_ where (board0_.title like ?) and board0_.bno>0 order by board0_.bno DESC
[179, 제목..179, user09, 2020-08-23 15:56:44.0]
[178, 제목..178, user08, 2020-08-23 15:56:44.0]
...

* @Query의 활용_nativeQuery의 사용
- 말 그대로 데이터베이스에 종속적인 SQL문을 그대로 사용할 수 있기 때문에 복잡한 쿼리를 작성할 떄 유용하게 사용
- 데이터베이스에 독립적이라는 장점을 어느 정도 포기해야 하므로 남용X
- @Query에 nativeQuery 속성을 'true'라고 지정하면 메소드 실행 시 @Query의 value값을 그대로 실행하게 됨
[log]
Hibernate: select bno, title, writer from tbl_boards where title like CONCAT('%', ?, '%') and bno > 0 order by bno desc
[179, 제목..179, user09]
[178, 제목..178, user08]

* @Query와 Paging 처리/정렬
- @Query를 이용하더라도 페이징 처리를 하는 Pageable 인터페이스 활용 가능
- 만약 메소드 파라미터에 Pageable 타입을 사용하게 되면, '@Query로 작성한 내용 + 페이징 처리'의 형태가 됨
- @Query에는 다른 조건으느 없고 단지 페이징 처리에 필요한 'bno > 0' 조건과 'oreder by' 조건만 부여하고 있음
[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where board0_.bno>0 order by board0_.bno DESC limit ?
Board(bno=200, title=제목..200, writer=user00, content=내용..200, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=199, title=제목..199, writer=user09, content=내용..199, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)

- 이처럼 Spring Data JPA를 이용하면 약간의 처리만으로 SQL이나 JDBC코드 작성 없이 원하는 결과를 얻을 수 있음
- 이러한 편리함은 관계가 복잡할수록 난이도가 높아짐

* Querydsl을 이용한 동적 SQL의 처리
- 쿼리를 처리하다 보면 다양한 상황에 맞게 쿼리를 생성하는 경우가 있음 (다양한 검색 조건에 대해 쿼리 실행하는 경우)
- 쿼리 메소드나 @Query를 이용하는 경우 개발 속도는 좋지만 고정적인 쿼리만을 생산함
- 동적인 상황에 대한 처리를 위해 @Querydsl 을 이용(Querydsl의 dsl은 'Domain Specific Language'의 약자로 특정 도메인 객체를 조회한다는 의미)
- Hibernate의 경우 Criteria라는 것을 주로 이용해 왔지만, Spring Data JPA를 이용하는 경우에는 Querydsl이 편리함
** Querytdsl을 이용하기 위한 순서
1) pom.xml의 라이브러리와 Maven 설정의 변경 및 실행
2) Predicate의 개발
3) Repository를 통한 실행

* Querydsl을 위한 준비
- Querydsl은 쉽게 말해서 Java를 이용해서 쿼리 조건을 처리할 떄 사용하는 라이브러리
- 개발자는 SQL을 직접 처리하지 않고, Querydsl을 이용해서 필요한 조건을 처리하는 Java 코드를 생성하고, Repository를 통해 이를 처리
- Querydsl을 이용하는 경우 엔티티 클래스는 Querydsl에서 사용하는 '쿼리 도메인 클래스(Q도메인 클래스)' 라는 것을 생성해서 처리해야 하는데 이를 위해 pom.xml과 Maven에 추가적인 변경 작업 필요

* Querydsl의 라이브러리 추가
- com.querydsl의 라이브러리 사용
- Querydsl은 JPA를 처리하기 위해 엔티티 클래스를 생성하는 방식을 이용
- 이를 'Qdomain'이라고 하는데, 동적 쿼리를 생성해 낼 떄, 이를 이용해야 하기 때문에 반드시 이를 실행할 수 있는 방법이 있어야 함
- pom.xml에는 Qdomain 클래스르르 생성하는 작업을 위한 코드 생성기가 필요, 이를 위해 pom.xml에 <plugin>을 추가
- 정상적으로 설정이 되었다면 프로젝트 내에 target이라는 폴더가 생성됨
- 생성된 target폴더 내 'generated-sources'를 보면 'QBoard.java' 파일이 생성 (생성되지 않는다면, Board.java 파일의 코드를 조금 수정한 다음 저장하면 생성됨)
- 메이븐에 <plugin>으로 추가된 코드 생성기는 Board.java파일이 변경되면 자동으로 Board.java를 생성해 주므로 한 번만 세팅해 주면 이후에는 별도 작업이 필요X

** QueryDsl 설치 시 발생할 수 있는 문제와 해결책
1) JDK가 아닌 JRE로 설정된 경우
2) 프로젝트의 JDK 설정 문제
- ini 파일에 -vm 과 jdk 경로(javaw.exe) 추가
- java Build Path에서 JDK 경로 설정
3) Maven 업데이트
4) Maven으로 빌드
- Maven을 이용하는 경우 명령어를 이용해야함
- Run As에서 Maven Build => new => 빌드 이름, 워크스페이스, Goals 설정 후 apply
=> Console 타이틀은 'Code Gen' 으로 지정되고, 프로젝트가 빌드되는 것을 확인할 수 있음

* Predicate 준비
- Predicate는 쉽게 말해 '이 조건이 맞다' 고 판단하는 근거를 함수로 제공하는 것
- 함수형 패러다임을 가진 언어들에서 자주 사용, Java8버전에도 포함되어 있음
- Repository에서 Predicate를 파라미터로 전달하기 위해 QueryDslPredicateExecutor<T> 인터페이스를 Repository에 추가해야함
** QueryDslPredicateExecutor<T> 인터페이스의 메소드
1) long count(Predicate) : 데이터의 전체 개수
2) boolean exists(Predicate) : 데이터의 존재 여부
3) Iterable<T> findAll(Predicate) : 조건에 맞는 데이터
4) Page<T> findAll(Predicate) : 조건에 맞는 데이터
5) Iterable<T> findAll(Predicate, Sort) : 조건에 맞는 데이터와 정렬
6) T findOne(Predicate) : 조건에 맞는 하나의 데이터

* Repository 변경
- Repository 인터페이스에는 QueryDslPredicateExecutor<T> 인터페이스를 상속하도록 추가

* Predicate 생성 및 테스트
- Predicate는 '단언,확신하다' 는 의미, 즉 boolean으로 리턴되는 결과 데이터를 만들어야 함, 주로 BooleanBuilder를 이용해서 생성
- BooleanBuilder를 생성하고, 여기에 동적 쿼리에 필요한 조건을 and()등을 이용해 추가
- QBoard는 Board의 속성을 이용해 다양한 SQL에 필요한 구문을 처리할 수 있는 기능이 추가된 형태이므로, like()나 get() 등 이용해 원하는 SQL을 구성하는 데 도움을 줌
- 리턴 타입은 Page<T>로 설정했기 떄문에 데이터를 추출하는 SQL과 개수를 파악하는 SQL이 실행되고 필요한 조건들이 지정됨
- 이와 같이 Predicate는 필요한 곳에서 생성하는 방식을 이용하기도 하지만 별도 클래스 등으로 만들어 사용할 수 있음

[log]
Hibernate: select board0_.bno as bno1_0_, board0_.content as content2_0_, board0_.regdate as regdate3_0_, board0_.title as title4_0_, board0_.updatedate as updateda5_0_, board0_.writer as writer6_0_ from tbl_boards board0_ where (board0_.title like ? escape '!') and board0_.bno>? limit ?
Hibernate: select count(board0_.bno) as col_0_0_ from tbl_boards board0_ where (board0_.title like ? escape '!') and board0_.bno>?
PAGE SIZE : 10
TOTAL PAGES : 2
TOTAL COUNT : 12
NEXT : Page request [number: 1, size 10, sort: UNSORTED]
Board(bno=17, title=제목..17, writer=user07, content=내용..17, regdate=2020-08-23 15:56:43.0, updatedate=2020-08-23 15:56:43.0)
Board(bno=117, title=제목..117, writer=user07, content=내용..117, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
Board(bno=170, title=제목..170, writer=user00, content=내용..170, regdate=2020-08-23 15:56:44.0, updatedate=2020-08-23 15:56:44.0)
...


