#5. Thymeleaf 사용해 보기
- 스프링 부트에서는 JSP를 사용하는 기존 화면 개발 방식에서 벗어나 템플릿 기반의 화면 처리가 지원 (FreeMarker나 Mustache, Thymeleaf를 이용해 확장자가 html인 페이지 개발 가능)
- Thymeleaf를 이용해 화면을 개발하기 위해 다음과 같은 것들이 필요함
1) 별도의 라이브러러리 - 서버 내부에서 처리되는 템플릿이기 때문에 별도 라이브러리가 필요
2) 추가 플러그인 - JSTL과 달리 이클립스에서는 편집 기능을 기본으로 제공하지 않기 때문에 추가적인 플러그인이 설치되어야 함
3) 자동 재시작 기능 - 코드를 수정하면 자동으로 스프링 부트를 재시작해서 수정된 코드를 반영해 주는 자동 재시작 기능을 추가해야 함

5_1. 프로젝트 설정
- 프로젝트에 필요한 라이브러리에서 'Template Engines' 항목에서 'Thymeleaf' 지정
-src/main/resource 폴더 하위에 있는 static은 js, css, html, 이미지 파일들을 추가하는 경로, templates 내부에는 Thymeleaf를 이용한 템플릿들을 넣게 됨
- 여러 개의 템플릿 엔진을 포함하지 않은 이상, 스프링 부트의 자동 구성 기능이 작동하여 이미 Thymeleaf에 대한 기본 설정은 완료된 상태가 됨
- 만약 스프링으로 프로젝트를 진행한다면 별도로 ViewResolver 등의 설정 필요

5_1_1. 기타 환경 설정
* utf-8 설정
- 윈도우에서는 프로젝트 내 파일들의 인코딩 설정이 MS949를 기본으로 설정되기 때문에 프로젝트 생성 이후에는 이를 변경해 주어야 한글 처리에 문제가 생기지 않음
- Window -> Preference -> Geneal -> Workspace 메뉴를 통해 기본 설정을 'UTF-8'로 설정

* application.propeerties 설정
- Thymeleaf는 기본적으로 '.html' 확장자를 사용하고 작성된 화면은 서버의 내부에 보관되어 재처리 없이 빠르게 서비스할 수 있는 환경으로 세팅됨
- Thymeleaf의 기본 설정으로 개발 시 알아두어야 하는 내용
1) 확장자는 '.html'을 기본으로 설정
2) 인코딩은 'utf-8'방식으로 설정
3) Mime 타입은 'text/html'로 설정
4) 서버 내부의 cache는 'true'로 설정
- 이 기본 설정의 경우 Thymeleaf로 개발된 화면을 수정하면, 매번 프로젝트를 재시작하는 불편함이 있기 때문에 개발 시에는 작성한 화면을 서버 내부에 보관(caching)하지 않도록 설정해 주는 것이 좋음

5_2. Thymeleaf 동작 확인하기
- Thymeleaf를 이용하는 예를 만들기 위해 필수적으로 Spring MVC의 컨트롤러들을 구성할 필요가 있음

5_2_1. 컨트롤러 작성
- 기존 JSP 대신 Thymeleaf로 된 템플릿을 이용하더라도 Web MVC의 구성 자체는 달라지는 것은 아니기 때문에 우선 컨트롤러를 구성해 주는 것으로 시작
- 컨트롤러의 구성 자체는 JSP를 이용하는 것과 전혀 차이가 없기 때문에 템플릿에 관계없이 작성할 수 있음

5_2_2. 템플릿 페이지 작성
- application.properties에서 별도의 확장자를 지정하지 않았다면 '.html'이 확장자로 사용되기 때문에 templates 폴더 내에 'sample1.html'이라는 파일을 작성하게 됨
- 이때 주의할 점은 Eclipes상에서 html파일을 생성하면 자동으로 'src/main/webapp'폴더로 들어가게 됨 => templates 폴더에서 'File' 생성을 통해서 sample1.html을 생성하도록 함
- 파일이 생성되면 반드시 templates 폴더 내에 생성되었는지 확인
- Thymeleaf의 이전 버전에서는 엄격하게 XML 규칙을 지켜야만 HTML 파일을 생성할 수 있었기 떄문에 반드시 태그의 쌍을 맞춰야만 했음
- 그러나 Thymeleaf3 버전 이후부터는 HTML 방식으로 태그를 조금 느슨하게 작성할 수 있으므로, 기존 HTML 코드들을 이용하기가 수월해졌음
- 가장 먼저 해야 하는 일은 작성된 템플릿 파일이 Thymeleaf를 사용한다는 것을 명시해 주는 것으로 <html>과 같이 가장 먼저 등장하는 태그에 작업
- 작성된 페이지를 확인할 수 있도록 Application.java 파일을 실행해서 스프링부트를 실행하고 브라우저에서 url 호출

* 페이지 수정하기
- 스프링 부트를 이용해서 웹을 개발할 때 'DevTools'를 포함한 상태에서 개발하는 것을 권장 (컨트롤러의 소스 코드를 수정하면 자동으로 스프링 부트를 재시작해 주기 때문에 편리)
- Model에 전달된 데이터를 확인하기 위해 sample1.html 코드 수정
- application.properties의 설정이 'spring.thymeleaf.cache=false'로 되어 있기 때문에 템플릿 페이지를 수정하고 브라우저에서 별도 서버 재시작 없이 바로 확인할 수 있음
- Thymeleaf의 장점 중 하나는 템플릿이 기본적으로 출력할 데이터가 없는 상황에서는 HTML로 작성된 내용이 그대로 반영된다는 점
- 앞서 추가 작성한 코드에서처럼 th:text와 같은 속성이 올바른 경우에만 내용이 변경, 'th:' 이후 작성되는 속성은 HTML에서 사용하는 속성과 동일하게 사용할 수 있음
- 현재 프로젝트는 생성 시 'DevTools'를 추가해 주었기 때문에 컨트롤러를 수정하는 작업 역시 자동으로 재시작됨

5_2_3. 이클립스에 Thymeleaf 플러그인 설치하기
- Thymeleaf 자체의 기능을 사용하기 위해서는 템플릿 코드를 추가하면 되지만, 좀 더 편하게 기능을 활용하려면 이클립스에 추가 플러그인이 필요
- Thymeleaf 플러그인은 이클립스 'Help -> Install New Softwares' 메뉴를 이용해서 추가 (http://www.thymeleaf.org/eclipse-plugin-update-site/)

5.3 Thymeleaf 간단한 예제 몇 가지
- 다음과 같은 처리들을 연습
1) 객체를 화면에 출력하기
2) 리스트를 화면에 출력하기
3) 변수나 제어문 처리
4) request의 파라미터들을 사용하기
5) 레이아웃 처리

5_3_1. 객체를 화면에 출력하기
- 가장 간단한 객체 출력은 JSP에서 EL을 이용해서 출력하는 것과 거의 동일, 문자, 숫자, 날짜 등 데이터를 가진 클래스의 인스턴스 생성
- VO 클래스를 하나 만들고, SampleController에 이를 이용하는 sample2()를 작성, Templates 경로에 html 파일 작성
- th:text는 태그의 내용물로 문자열을 출력

* HTML 출력하기 - utext
- th:text와 달리 th:utext는 문자열이 아니라 HTML 자체를 출력하는 데 사용할 수 있음

5_3_2. 리스트를 화면에 출력하기
- 화면에서 가장 많이 사용하는 루프 처리는 th:each를 이용해서 처리할 수 있음, th:each는 리스트나, Iterable, Map, 배열 등을 사용할 수 있음
- th:each에 사용하는 표현식은 th:each="var : ${list}" 와 같은 방식으로 작성, 'var'는 루프를 돌 때 n번째의 요소를 의미
- 예제를 위해 여러 개의 MemberVO 객체를 리스트에 담아서 출력, Model로 전달된 객체는 JSP의 EL과 같은 형태로 사용 가능
- 마지막에 사용한 '#dates.format()'은 Thymeleaf의 보조 객체로, 날짜와 관련된 처리에 유용하게 사용
- th:each에는 반복의 상태에 대한 변수를 지정하여, 필요한 추가 정보들을 추출할 수 있음, th:each에 현재 상태에 대한 변수를 선언하면 다음과 같은 항목들을 사용할 수 있음
1) index : 0부터 시작하는 인덱스 번호
2) count : 1부터 시작하는 번호
3) size : 현재 대상의 length, size
4) odd/even : 현재 번호의 홀/짝수 여부
5) first/last : 처음 요소인지 마지막 요소인지를 판단
- th:each에는 iterState라는 추가 변수를 지정해서 사용하고, index나 size 등을 이용해 추가 데이터를 출력

5_3_3. 지역변수의 선언, if ~ unless 제어 처리
- Thymeleaf에서는 특정 범위에서만 유효한 지역변수를 th:with를 이용해서 선언할 수 있음
- sample4() 작성 (기존 코드와 유사하지만, i%3으로 나머지 값 이용)
- sample4.html은 기존 소스에 th:with를 추가, th:with를 이용해서 target이라는 이름의 변수 작성, 이 변수는 <table> 태그 내에서만 유효한 전역변수가 됨
- 만일 목록을 출력할 때 member.mid 값이 'u0001'인 사용자만 다른 내용으로 출력하고 싶다면 th:if를 이용하거나 삼항 연산자를 이용해서 처리 가능 (u0001 대신 SECRET이라는 문자열로 보임)
- 삼항 연산자를 이용하는 방식이 간편하긴 하지만 경우에 따라서 if ~ else 처리가 필요 (th:if ~ unless 이용)
- th:if는 내부 식(expression)의 결과가 true인 경우에만 th:if 를 포함하는 태그 자체가 생성됨 (member.mid가 target과 같은 경우에는 <a> 태그 출력, 아닌 경우에는 <p> 태그 출력)

5_3_4. 인라인 스타일로 Thymeleaf 사용하기
- JSP 페이지를 작성하다 보면 가끔 EL을 이용해서 자바스크립트 코드를 작성하는 경우가 종종 있음, Thymeleaf에서는 이러한 경우에 별도 표기 방법 지원
- th:inline 이라는 것을 이용해서 'javascript'나 'text'를 지정해서 사용
- 예를 들어 화면에 result라는 결과를 문자열로 전달하는 경우 th:inline을 이용해 <script> 태그 내 Thymeleaf를 사용한다는 것을 명시
- 주의 깊게 봐야 하는 부분은 <script> 태그 내에 th:inline 속성을 지정하는 부분, 코드를 브라우저의 '페이지 소스'로 보면 차이점이 있음
- th:inline='javascript'를 지정한 코드에서는 자바스크립트 문자열로 제대로 생성 (var result = "SUCCESS";)
- 그렇지 않은 경우에는 변수처럼 선언 (var result = SUCCESS;)
- Thymeleaf의 inlining은 기본은 'text'로 지정되므로, 일반 태그를 작성할 때도 사용할 수 있음

5_4. Thymeleaf의 유틸리티 객체
- thymeleaf는 기본적으로 표현식을 통해 데이터를 출력하는 역할이 중심이지만, 이를 돕기 위한 다양한 객체 지원
* Expression Basic Object(표현식 기본 객체)
1) #ctx
2) #vars
3) #locale
4) #httpServletRequest
5) #httpSession

* Expression Utility Objects(표현식 유틸 객체)
1) #dates
2) #calendars
3) #numbers
4) #strings
5) #objects
6) #bools
7) #arrays
8) #lists
9) #sets
10) #maps
11) #aggregates
12) #messages

- 표현식 기본 객체는 기존에 JSP에서 application이나 request, session등을 사용할 때 변수가 됨 (#vars의 경우 생략한 상태로 주로 사용)
- <div>[[${result}]]</div> 와 <div>[[${#vars.result}]]</div> 는 동일한 의미

5_4_1. 유틸리티 객체
- Thymeleaf의 표현식은 OGNL(Object-Graph Navigation Language) 표현식을 이용해 데이터를 출력
- OGNL은 다양한 프레임워크와 언어에서 사용하지만, Java만을 이용할 때는 불편한 점들이 있음 (문자열을 비교할 때 Java에서는 equals()를 이용하지만 OGNL에서는 'eq'와 같이 조금 다른 방식 이용)
- 유틸리티 객체는 기존처럼 메소드를 호출하는 방식으로 사용할 수 있는 객체들임
- 날짜를 포매팅(formatting) 하기 위해서는 ${#dates.format(member.regdate, 'yyyy-mm-dd')} 와 같은 방식 사용

* 날짜 관련 $dates, #calendars
- 날짜 관련 기능은 java.util.Date와 java.util.Calendar의 기능을 이용한다고 생각하면 됨
- #dates와 #calendars에는 createToday()를 이용해 변수로 사용할 수도 있음

* 숫자 관련 #numbers
- Integer 나 Double, Float에 대한 포매팅을 처리할 때 주로 이용, 소수점의 경우 formatInteger를 이용하면 정수 처리가 됨

* 문자 관련 #strings
- 문자열 관련해서는 대소문자 변환이나 contains()등 기본적인 기능들 외에 문자열을 결합하는 join이나 리스트로 나누는 listsplit등 기능 지원

5_5. Thymeleaf 링크 처리
- 일반적인 웹 페이지의 링크는 크게 "http://www...."와 같은 형태의 절대(absolute path)경로와 현재 URL을 기준으로 이동하는 상대(context-relative)경로 2가지로 구분됨
- 스프링 부트에서는 프로젝트를 실행하면 '/'를 기준으로 동작하기 때문에 경로에 대한 스트레스 없이 작성할 수 있지만, WAS상에서 특정 경로에서 프로젝트가 실행되는 경우에 문제가 될 수 있음
- 문제 해결을 위해 '@{ }'를 이용해 경로에 대한 처리를 자동으로 처리할 수 있음
- 링크에 대한 처리는 지금까지 작성한 '/sample1', '/sample2' 와 같은 경로들이 존재하므로, 이를 화면에서 처리하는 예제 작성
- '@{http:// ...}'으로 시작하는 코드는 절대 경로 처리에 사용
- '@{/sample1}'에는 현재 실행되는 컨텍스트의 경로가 반영됨 (만약 컨텍스트의 경로가 '/'라면 '/samlpe1'이 되지만, 컨텍스트 경로가 'boot5'인 경우에는 'boot5/sample1'과 같은 경로가 됨)
- '@{~/sample1}'의 경우는 현재 프로젝트가 '/' 경로에서 실행되었기 때문에 '@{/sample}'과 차이가 없게 됨
- Thymeleaf의 링크 처리에서 조금 특이한 부분은 파라미터를 전달하는 경우
- 일반적으로 직접 링크를 생성하기 위해 '파라미터의 이름 = 값' 의 형태로 작성하지만, Thymeleaf를 이용하면 (이름(키) = 값)의 형태로 링크를 생성할 수 있음 => <a href="/sample1?p1=aaa&amp;p2=bbb">sample1</a>

5_6. Thymeleaf의 레이아웃 기능
- Thymeleaf를 이용하면 기본적으로 제공하는 th:insert, th:replace, th:include와 같은 속성들을 이용해서 기존 페이지의 일부분을 다른 내용으로 쉽게 변경할 수 있음
- Thymeleaf는 부분적인 화면의 처리 기능과 더불어, 화면 전체의 레이아웃을 지정하고, 페이지를 작성할 때 필요한 부분만을 교체해서 사용하는 템플릿 기능이 지원됨

5_6_1. th:insert를 이용해서 페이지의 헤더와 푸터 처리하기
- 예제를 위해 templates 폴더에 추가로 fragments 라는 폴더를 작성하고, 헤더와 푸터 html 작성

5_6_2. Thymeleaf layout dialecct를 이용한 레이아웃 재사용하기
- Thymeleaf에 기본적으로 포함된 라이브러리는 아니지만, Thymeleaf layout dialect를 이용하면 하나의 레이아웃을 작성하고 이를 재사용해서 여러 페이지에 동일한 레이아웃을 적용시킬 수 있음 (템플릿 상속)
- 템플릿 상속을 이용하면 전체 레이아웃 구성 후 레이아웃 내에서 원하는 위치에 필요한 페이지들을 끼워 넣거나, 변경하는 작업이 가능해 짐, 개발 시 현재 본인이 작업하는 페이지의 내용만을 처리할 수 있다는 편리함이 있음
- pom.xml에 Thymeleaf Layout Dialect 라이브러리 추가
- 예제에서는 레이아웃 상속 기능을 적용해 보기 위해 HTML5 Boilerplate를 적용, HTML5 Boilerplate는 웹 페이지에서 가장 기본적으로 필요한 구조를 템플릿으로 만들어 둔 것
- 예를 들어 기본적인 js, image 폴더들의 구조나 favicon, ico 파일, index.html 파일 등을 묶음으로 만들어 둔 다음, 이를 이용해서 전체 구조를 잡고 페이지를 추가하는 방식으로 사용할 수 있음
- HTML5 Boilerplate를 다운받고 압출을 풀고 static폴더로 넣어줌
- 레이아웃을 적용하기 위해 template 내에 layout폴더를 작성하고, layout1.html 파일 작성
- layout1.html 파일의 내용은 index.html 을 그대로 복사해 추가, 파일 상단에 기존 Thymeleaf 네임스페이스 외에 layout을 위한 네임스페이스를 추가
- 변경된 layout1.html에서 매번 페이지 제작 시 변경되는 영역은 'content-body'라고 표현된 부분과 'custom javascript' 라고 표현된 영역임

* th:block과 layout:fragment
- layout1.html에서 매번 변경되는 영역은 화면의 Thymeleaf 코드를 사용하는 'content-body' 영역과 매 페이지에서 필요한 Javascript 코드를 넣어주는 'custom javascript'영역임
- layout:fragment는 <div>와 같이 실제로 보이는 영역에 적용해 주고, th:block은 아무런 태그가 없는 영역을 표시할 때 사용

* 페이지에 레이아웃 적용하기
- 컨트롤러를 호출하는 페이지에 레이아웃을 적용하기 위해 SampleController에 메소드 설계, templates 폴더 내 sample 폴더를 작성하고 hello.html 파일 생성
- 레이아웃 적용 전 페이지가 정상적으로 동작하는지 확인
- 브라우저 개발자 도구를 통해 확인해 보면 다른 리소스들은 필요로 하지 않았기 때문에 /sample/hello 라는 URL만 호출된 것이 보임
- 레이아웃을 적용하려면 hello.html에 레이아웃을 사용할 수 있는 네임스페이스를 추가해 주어야 함
- hello.html에서는 layout의 layout1.html을 이용하도록 설정되었고, layout1.html에서 필요한 부분의 코드를 추가
- 이와 같이 변경된 코드를 브라우저에서 호출하면 레이아웃이 적용되면서 다른 리소스들을 호출하는 것을 볼 수 있음
- 호출되는 내용을 보면 layout1.html 에서 필요한 css나 js 파일들을 호출하는 것을 알 수 있음
- 현재 경로가 '/sample'로 시작했기 때문에 최종적으로 layout1.html에서 링크의 경로를 수정해 줘야 함 ('@{/}'의 경로를 이용해서 수정)
- 브라우저에서 '/sample/hello'를 호출하면 작성된 페이지와 레이아웃, 리소스들이 모두 적용된 페이지를 볼 수 있게됨
- 스프링 부트는 Thymeleaf 외에도 레이아웃을 사용할 수 있는 다양한 템플릿 기능들을 지원하지만, 이 책에서는 Thymeleaf를 사용해서 처리함

