#5. Thymeleaf 사용해 보기
- 스프링 부트에서는 JSP를 사용하는 기존 화면 개발 방식에서 벗어나 템플릿 기반의 화면 처리가 지원 (FreeMarker나 Mustache, Thymeleaf를 이용해 확장자가 html인 페이지 개발 가능)
- Thymeleaf를 이용해 화면을 개발하기 위해 다음과 같은 것들이 필요함
1) 별도의 라이브러러리 - 서버 내부에서 처리되는 템플릿이기 때문에 별도 라이브러리가 필요
2) 추가 플러그인 - JSTL과 달리 이클립스에서는 편집 기능을 기본으로 제공하지 않기 때문에 추가적인 플러그인이 설치되어야 함
3) 자동 재시작 기능 - 코드를 수정하면 자동으로 스프링 부트를 재시작해서 수정된 코드를 반영해 주는 자동 재시작 기능을 추가해야 함

5_1. 프로젝트 설정
- 프로젝트에 필요한 라이브러리에서 'Template Engines' 항목에서 'Thymeleaf' 지정
-src/main/resource 폴더 하위에 있는 static은 js, css, html, 이미지 파일들을 추가하는 경로, templates 내부에는 Thymeleaf를 이용한 템플릿들을 넣게 됨
- 여러 개의 템플릿 엔진을 포함하지 않은 이상, 스프링 부트의 자동 구성 기능이 작동하여 이미 Thymeleaf에 대한 기본 설정은 완료된 상태가 됨
- 만약 스프링으로 프로젝트를 진행한다면 별도로 ViewResolver 등의 설정 필요

5_1_1. 기타 환경 설정
* utf-8 설정
- 윈도우에서는 프로젝트 내 파일들의 인코딩 설정이 MS949를 기본으로 설정되기 때문에 프로젝트 생성 이후에는 이를 변경해 주어야 한글 처리에 문제가 생기지 않음
- Window -> Preference -> Geneal -> Workspace 메뉴를 통해 기본 설정을 'UTF-8'로 설정

* application.propeerties 설정
- Thymeleaf는 기본적으로 '.html' 확장자를 사용하고 작성된 화면은 서버의 내부에 보관되어 재처리 없이 빠르게 서비스할 수 있는 환경으로 세팅됨
- Thymeleaf의 기본 설정으로 개발 시 알아두어야 하는 내용
1) 확장자는 '.html'을 기본으로 설정
2) 인코딩은 'utf-8'방식으로 설정
3) Mime 타입은 'text/html'로 설정
4) 서버 내부의 cache는 'true'로 설정
- 이 기본 설정의 경우 Thymeleaf로 개발된 화면을 수정하면, 매번 프로젝트를 재시작하는 불편함이 있기 때문에 개발 시에는 작성한 화면을 서버 내부에 보관(caching)하지 않도록 설정해 주는 것이 좋음

5_2. Thymeleaf 동작 확인하기
- Thymeleaf를 이용하는 예를 만들기 위해 필수적으로 Spring MVC의 컨트롤러들을 구성할 필요가 있음

5_2_1. 컨트롤러 작성
- 기존 JSP 대신 Thymeleaf로 된 템플릿을 이용하더라도 Web MVC의 구성 자체는 달라지는 것은 아니기 때문에 우선 컨트롤러를 구성해 주는 것으로 시작
- 컨트롤러의 구성 자체는 JSP를 이용하는 것과 전혀 차이가 없기 때문에 템플릿에 관계없이 작성할 수 있음

5_2_2. 템플릿 페이지 작성
- application.properties에서 별도의 확장자를 지정하지 않았다면 '.html'이 확장자로 사용되기 때문에 templates 폴더 내에 'sample1.html'이라는 파일을 작성하게 됨
- 이때 주의할 점은 Eclipes상에서 html파일을 생성하면 자동으로 'src/main/webapp'폴더로 들어가게 됨 => templates 폴더에서 'File' 생성을 통해서 sample1.html을 생성하도록 함
- 파일이 생성되면 반드시 templates 폴더 내에 생성되었는지 확인
- Thymeleaf의 이전 버전에서는 엄격하게 XML 규칙을 지켜야만 HTML 파일을 생성할 수 있었기 떄문에 반드시 태그의 쌍을 맞춰야만 했음
- 그러나 Thymeleaf3 버전 이후부터는 HTML 방식으로 태그를 조금 느슨하게 작성할 수 있으므로, 기존 HTML 코드들을 이용하기가 수월해졌음
- 가장 먼저 해야 하는 일은 작성된 템플릿 파일이 Thymeleaf를 사용한다는 것을 명시해 주는 것으로 <html>과 같이 가장 먼저 등장하는 태그에 작업
- 작성된 페이지를 확인할 수 있도록 Application.java 파일을 실행해서 스프링부트를 실행하고 브라우저에서 url 호출

* 페이지 수정하기
- 스프링 부트를 이용해서 웹을 개발할 때 'DevTools'를 포함한 상태에서 개발하는 것을 권장 (컨트롤러의 소스 코드를 수정하면 자동으로 스프링 부트를 재시작해 주기 때문에 편리)
- Model에 전달된 데이터를 확인하기 위해 sample1.html 코드 수정
- application.properties의 설정이 'spring.thymeleaf.cache=false'로 되어 있기 때문에 템플릿 페이지를 수정하고 브라우저에서 별도 서버 재시작 없이 바로 확인할 수 있음
- Thymeleaf의 장점 중 하나는 템플릿이 기본적으로 출력할 데이터가 없는 상황에서는 HTML로 작성된 내용이 그대로 반영된다는 점
- 앞서 추가 작성한 코드에서처럼 th:text와 같은 속성이 올바른 경우에만 내용이 변경, 'th:' 이후 작성되는 속성은 HTML에서 사용하는 속성과 동일하게 사용할 수 있음
- 현재 프로젝트는 생성 시 'DevTools'를 추가해 주었기 때문에 컨트롤러를 수정하는 작업 역시 자동으로 재시작됨
