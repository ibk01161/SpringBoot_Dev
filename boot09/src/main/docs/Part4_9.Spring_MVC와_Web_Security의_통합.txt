#9. Spring MVC와 Web Security의 통합
- Spring MVC를 이용해 만든 기존 프로젝트에 스프링 시큐리티를 추가
1) 웹 프로젝트에서 특정 URI에 대한 접근 제한 처리 및 로그인
2) Ajax를 이용하는 호출 시 CSRF 토큰에 대한 처리

9.1. 프로젝트 구성
- 예제는 게시물 관리 시스템과 시큐리티 프로젝트를 하나로 묶는 작업
- 작성된 프로젝트의 모든 기능을 사용하기 위해 pom.xml에 추가 라이브러리들이 필요 (Thymeleaf-layout, Querydsl, Thymeleaf-security)

9.1.1. 기존 프로젝트 통합
- 프로젝트를 통합할 때 가장 우선적으로는 application.properties를 처리, 저번 프로젝트 application.properties를 그대로 복사해서 사용
- 만들어진 프로젝트에 게시물과 댓글 처리와 관련된 내용이 필요하므로 저번 프로젝트 복사
- 현재까지 복사한 프로젝트가 정상적으로 동작하는지 프로젝트를 실행시켜 확인
- 브라우저에서는 '/board/list'를 호출했을 때 정상적으로 호출되고, 로그인 경고창이 보이는 것을 확인, 경고창이 뜨는 이유는 스프링 시큐리티가 추가되고 별도 설정이 없기 때문
- 이는 스프링 부트에 자동 설정 기능이 동작하기 때문, 프로젝트 생성 시 'security' 를 추가한 상태이므로 기본 인증 처리가 설정되기 때문에 로그인 창이 보임
- 기본 인증 매니저는 'user'라는 계정을 가지고, 패스워드는 프로젝트의 로딩 시 출력되는 기본 패스워드임, 이를 이용해 로그인을 하면 정상적으로 list화면이 출력되어야 함

9.1.2. 시큐리티 설정
- 기본 계정과 패스워드를 이용해 로그인을 하고, 정상적인 화면이 나오는 것을 확인했다면, 저번 프로젝트에서 사용했던 설정을 이용해 시큐리티 설정을 추가
- 저번 프로젝트의 domain, persistence, controller, security 패키지 복사
- 코드를 통합한 이후에는 게시물 관리의 GET 방식으로 동작하는 기능들이 정상적으로 동작하는지 확인해야 함 (POST방식은 CSRF 토큰 값이 필요하므로 GET 방식을 사용해야함)
= 8장에서 스프링 시큐리티 학습에 사용했던 화면을 추가하지 않은 이유는 Thymeleaf의 레이아웃 기능 등을 적용해 새로 작성할 필요가 있기 때문

9.2. 게시물 작성 부분
- 가장 먼저 처리할 부분은 로그인한 사용자만 특정 URI에 접근이 가능하도록 설정, list는 모든 사용자가 볼 수 있도록 하고, register는 로그인한 사용자만 접근할 수 있도록 작성 (SecurityConfig를 이용해 설정)
- hasAnyRole()를 이용하면 여러 개의 Role을 설정할 수 있으므로, 하나 이상의 Role을 지정할 때 편하게 사용할 수 있음
- 프로젝트를 실행하고 새로운 게시물을 작성하는 페이지를 호출할 때 정상적으로 접근 제한이 되는지 확인 (현재 /login에 해당하는 웹 페이지는 존재하지 않으므로 templates 폴더에 login.html 추가)
- 로그인 화면에서 사용자가 정상적으로 로그인 하면 '/' 경로로 이동하게 됨 (register에서부터 처리되었다면 register로 이동하게 됨)
- 브라우저에서 register를 호출하면 정상적으로 게시물 작성 페이지로 이동됨
- 주소창에서 login을 직접 호출해 로그인을 시도하는 경우에는 Spring Security의 기본 설정에 따라 '/' 경로로 이동하게 됨, 반면에 특정 페이지에서 login으로 이동한 경우에는 로그인 후에 자동으로 기존 페이지로 이동하게 됨
- 로그인하지 않는 사용자가 브라우저에서 register를 호출하게 되면 이전과 동일하게 login 으로 이동하게 됨, 로그인 후에는 자동으로 register로 이동하는 것을 볼 수 있음

9.2.1. 게시물 작성 시 사용자 아이디 편집
- URI에 대한 접근 제어 처리가 완료되었다면, 게시물 등록 화면에서 로그인한 사용자의 아이디를 작성자의 입력란에 자동으로 처리하도록 함
- 이는 Thymeleaf-security를 이용해 처리, boards 폴더 내 register.html 내에서 Thymeleaf-security를 사용할 수 있도록 네임스페이스를 편집
- 작성자의 입력 부분은 'readonly'를 지정하고, 현재 로그인한 사용자의 uid가 출력되도록 수정
- Thymeleaf 시큐리티 관련 처리가 완료되면 현재 로그인한 사용자의 uid가 출력되는 것을 볼 수 있음
- 스프링 시큐리티가 적용되면 별도의 설정이 없는 이상 GET 방식을 제외한 POST 등의 방식으로 전송할 경우 CSRF 토큰 값이 반드시 필요
- 흥미로운 사실은 <form> 태그에 Thymeleaf의 속성을 추가하면 자동으로 'CSRF' 필터가 적용되어 있다는 점, 떄문에 직접 CSRF 값을 지정할 필요 없이 <form> 데이터를 전송할 수 있음
=>  <input type="hidden" name="_csrf" value="7025ca05-3f62-4569-b40b-c75f1551f4af">
- CSRF 토큰까지 처리된 것을 확인한 후에 게시물을 등록하면 정상적으로 새로운 게시물이 등록되는 것을 볼 수 있음

9.3. 게시물 조회
- 게시물 조회 화면에서 시큐리티 적용이 필요한 부분
1) 현재 게시물의 작성자만이 수정/삭제가 가능하도록 제어
2) 게시물의 댓글 처리 시에 대한 제어
- 댓글 처리는 Ajax를 이용해야 하므로 뒤에서 처리하고, 우선은 현재 게시물의 작성자와 현재 페이지를 보는 사용자(로그인했거나 하지 않은)가 동일한 사용자인 경우에는 '수정/삭제'를 처리할 수 있도록 제어

9.3.1. 게시물 수정/삭제 버튼의 제어
- 수정/삭제 버튼을 제어하는 방식은 화면상에서 버튼 자체를 안 보이도록 처리하는 방식, 버튼은 보이고, JavaScript를 이용해 로그인을 유도하는 방식이 일반적
- 버튼을 감추는 방식에서는 현재 사용자가 로그인을 한 사용자인지 아닌지를 구분해서 처리해야 함, view.html에 Thymeleaf-security 네임스페이스를 설정
- authentication.principal을 이용해서 현재 '익명의 사용자(anonymousUser)' 인지 '로그인 사용자(${#authentication.principal.member.uid})' 인지를 체크
- 사용자의 아이디를 uid 변수로 지정하고, 이를 이용해 th:if로 버튼이 보이도록 처리, <a> 태그에 id 속성을 추가한 것을 JavaScript 처리를 단순하게 하기 위해서 추가
- 현재 로그인한 사용자가 자신이 작성한 게시글을 조회하는 경우에는 다음과 같이 수정/삭제 버튼이 보이게 됨, 자신이 작성한 글이 아니면 하나의 버튼만 보이게 됨
- 만약 JavaScript를 이용해서 처리하고 싶다면 <a> 태그에서 th:if 부분을 삭제한 후에 작성
- 만일 현재 사용자가 로그인하지 않은 상태에서 '수정/삭제' 버튼을 클릭하면 브라우저는 '수정/삭제'가 가능한 URL로 이동하게 됨, 수정/삭제는 로그인이 필요하므로, 버튼을 클릭하면 자동으로 로그인 페이지가 뜸
- 만일 로그인한 사용자가 현재 게시물의 작성자가 아니면 다른 메세지가 보이게 됨





































