#2. Spring Data JPA 맛보기 (boot02)
- Spring Data JPA는 JPA(Java Persistence API)라는 기술을 스프링에서 개발할 수 있도록 돕는 라이브러리, 다양한 데이터베이스에 종속적인 SQL문 없이 개발이 가능하기 때문에 개발의 생산성을 높일 수 있음

* ORM(Object Relational Mapping)
- 객체지향에서 말하는 객체와 데이터베이스에서 말하는 개체가 상당히 유사
- 객체지향과 관계형 데이터베이스를 매핑시킨다는 추상화된 개념

* JPA란?
- Java Persistence API의 약자, Java를 이용해 데이터를 관리(유지)하는 기법을 하나의 스펙으로 정리한 표준, EJB라는 기술 스펙에서 엔티티 빈이라는 데이터를 처리하는 스펙을 정한 것이 JPA의 시초
- ORM의 개념을 Java 언어에서 구현하기 위한 스펙, 기존 JDBC등을 이용해 직접 구현했던 데이터베이스 관련 작업을 대신 처리해 주는 추상화된 계층의 구현 스펙
- 데이터베이스에 대한 처리를 JPA 계층에서 처리하기 때문에 좀 더 추상화된 형태의 코드를 제작하는 것만으로 개발이 가능
- JPA 그 자체로는 스펙에 불과하기 때문에 이를 실제로 구현한 제품이나 프레임워크들의 존재가 필수적 (Servlet이라는 기술 스펙을 Tomcat에 구현한 것 처럼)
- JPA를 구현한 구현체(프로바이더) 중에서 스프링부트에서는 Hibernate라는 것을 이용 (이외에도 EclipseLink, DataNucleus 등이 있음)

* JPA의 장점
1) 데이터베이스 관련 코드에 대해 유연함을 얻을 수 있음
- 데이터베이스 변경은 기존 소스 코드에 치명적인 영향을 끼침, 데이터베이스가 변경되면 SQL이 변경되고, DAO나 서비스, 화면까지 영향을 미치게됨
- JPA를 이용하면 테이블 생성 등과 같은 작업부터 변경되는 DB설계와 JAVA설계를 한 번에 처리할 수 있음
2) 데이터베이스와 독립적인 관계
- JPA는 특정 벤더의 데이터베이스에 종속적이지 않기 때문에 데이터베이스 제품이 변경되거나 버전이 변경되는 것과 같은 일에서 자유로워질 수 있음

* JPA의 단점
1) 학습 곡선이 큼
- 기존 데이터베이스 위주 학습에 비해 새로운 기능들이 많음, 새로운 개념과 기술을 익히는 학습 곡선이 크기 때문에 적용이 어려움
2) 근본적인 객체지향 설계 사상이 반영되어야 함
- '어떻게 적합한 객체들의 관계를 작성할 것인가' 가 프로젝트의 성패를 좌우함, 이 과정에서 충분한 설계와 검토 과정을 거쳐야 함
3) 특정 데이터베이스의 강력함을 활용할 수 없다는 문제
- JPA를 이용하면 SQL 튜닝 등 작업에 제약이 생길 수 있음, native SQL 이라는 기능을 지원해 기존 SQL을 재사용 할 수 있지만, 이 경우 데이터베이스에 독립적인 개발이 불가능해 JPA의 장점을 잃는 한계를 가지게 됨

* JPA의 구조 (Application <-> JPA <-> JDBC <-> DataBase)
- JPA를 이용하면 Java로 작성된 클래스, 객체들과 데이터베이스상에 테이블, 레코드들을 자동으로 관리하게 됨, 별도 SQL을 작성할 필요 없이 원하는 객체지향의 구조를 설계하는 것만으로 모든 개발을 끝낼 수 있음
- 중간에 JPA의 역할이 중요함, Java 쪽 메모리 상태와 데이터베이스의 상태를 관리해야 하기 때문에 별도 용어가 있음


* 엔티티(Entity), 엔티티 매니저(EntityManager)
- 엔티티 : 데이터베이스상에서 데이터로 관리하는 대상을 의미 (상품, 회사, 직원 과 같이 명사이면서 업무와 관련된 데이터를 엔티티로 규정)
	 데이터베이스에서는 엔티티를 위해서 일반적으로 테이블을 설계하고, 데이터를 추가하는데 이렇게 추가된 데이터는 '인스턴스', '레코드' 라는 용어로 호칭
	 JPA에서는 Java를 이용해 이러한 엔티티들을 관리하기 때문에 엔티티 타입의 존재는 클래스가 됨(JPA에서 '하나의 엔티티 타입을 생성한다' 라는 의미는 '하나의 클래스'를 작성한다.)
	 주의할 점은 '엔티티' 라는 용어가 때로는 클래스를 의미할 경우도 있지만, 때로는 인스턴스를 의미하는 경우도 있음 ('회원 엔티티'가 회원 클래스를 의미하는 경우도 있고, 회원 클래스에서 생성된 인스턴스를 의미하는 경우도 있음)
- 엔티티 매니저 : 엔티티 객체들을 관리하는 역할 (관리 = LIfe Cycle), 엔티티 매니저는 자신이 관리해야 하는 엔티티 객체들을 '영속 컨텍스트(Persistence Context)' 라는 곳에 넣어두고, 객체들의 생사를 관리하게 됨

* 영속 컨텍스트(Persistence Context)와 엔티티 객체
- 영속 컨텍스트는 JPA가 엔티티 객체들을 모아두는 '공간'이라고 이해할 수 있음 (공간이나 울타리 개념)
- New(비영속) : Java 영역에 객체만 존재하고, 데이터베이스와 연동된 적 없는 상태, 엔티티 매니저의 관리하에 있는 것이 아니기 때문에 순수한 Java 객체
- Managed(영속) : 데이터베이스에 저장되고, 메모리상에서도 같은 상태로 존재하는 상태, 객체는 영속 컨텍스트에 들어가게 되고, id(PK)값을 통해 필요한 엔티티 객체를 꺼내 사용할 수 있게 됨
- Removed(삭제) : 데이터베이스상에서 삭제된 상태, 객체는 더 이상 영속 컨텍스트에 존재하지 않음
- Detached(준영속) : 영속 컨텍스트에서 엔티티 객체를 꺼내서 사용하는 상태, 준영속 상태의 객체는 고유한 id(PK)를 가지고 있지만, 아직 데이터베이스와 동기화가 이루어지지 않은 상태

* 기존의 JPA 개발과 Spring Data JPA
- 기존 Java를 공부할 때 Java에서 인터페이스를 설계하고, 이를 구현하는 클래스를 만드는 것이 일반적이지만
- Spring Data JPA는 동적으로 인터페이스를 구현하는 클래스를 만들어 내는 방식(동적 프록시_Dynamic Proxy)을 이용해 실제 클래스를 작성하지 않아도 자동으로 만들어지기 때문에 별도의 코드를 작성할 필요가 없음

* Spring Data JPA를 위한 프로젝트 생성
- 스프링부트 가장 큰 장점 중 하나가 스프링과 사용하는 라이브러리의 버전에 신경 쓸 필요가 없음 (필요한 라이브러리들의 버전을 스프링부트의 버전에 맞게 조정해 주기 때문에 설정에 신경 쓰지 않고 개발 가능)
- 라이브러리(Spring Boot Dev Tools) : 자동으로 서버의 재시작을 도와줌, 이를 이용해 코드를 수정하면 자동으로 서버를 재시작해 주므로 개발 시간을 단축시켜줌

* 프로젝트 실행과 DataSource 설정
- 스프링부트에 JDBC와 같은 추가 라이브러리를 포함해서 이용했을 때 가장 큰 차이점은 실행에 제약이 있다는 점 => main()을 실행해보면 정상적으로 실행X => 원인은 스프링부트 자체가 자동으로 설정을 구성하기 때문
- 스프링부트가 동작할 때 JDBC 등과 같은 라이브러리가 포함되어 있으면 라이브러리를 이용해서 필요한 객체들을 구성하려고 하는데 이때 데이터베이스 설정이 없기 때문에 실행X => 데이터베이스 구성하고 DataSource를 지정해줘야함

* MySQL 설정
- 새로운 스키마 생성 => 새 스키마 를 사용할 새로운 사용자 계정 생성

* DataSource 설정
- DataSource에 대한 설정을 지정해 주어야 실행 됨 (여러가지 방법이 있는데 1번으로 설정)
1) 'application.properties'를 이용해 필요한 구성 설정 - application.properties에 데이터베이스 연결에 필요한 JDBC연결 설정
2) @Bean과 같은 어노테이션을 이용해서 Java 코드를 통해 필요한 객체를 구성하는 방법

* 엔티티 클래스 설계
- 관계형 데이터베이스에 데이터를 보관하려면 테이블을 생성해줘야 하는데 Java에서 특정 구조를 설계하기 위해 클래스를 설계하는 것과 유사, JPA는 자동으로 테이블을 생성할 수 있는 기능을 가지고 있음
- SQL을 이용해서 테이블을 먼저 생성하고 엔티티 클래스를 만드는 방법이나, JPA를 이용해서 클래스만 설계하고 자동으로 테이블을 생성하는 방식 모두 사용 가능, 예제에서는 후자
** 순서
1) 엔티티 클래스 설계
- 패키지에 클래스 작성 후 인스턴스 변수들과 Lombok으로 생성할 코드 지정
- 최근에는 엔티티 클래스의 시간을 처리할 때 java.time.LocalDateTime을 이용하지만, 예제에서는 화면 처리에 더 편리한 Timestamp 타입을 이용함
2) JPA를 위한 어노테이션 추가 (import 주의)
- 적절한 어노테이션을 적용해 JPA에서 필요한 정보들을 설정
* 어노테이션 종류
- @Id : 각 엔티티를 구별할 수 있도록 식별 ID를 가지게 설계함, 해당 컬럼이 식별키(PK키)라는 것을 의미, 모든 엔티티에는 반드시 @Id 지정
        : 식별키 지정 방법 - 1) 사용자가 직접 지정
		       - 2) 자동으로 생성되는 번호 등을 이용 
		       - 3) 별도 방법으로 필요한 데이터를 생성하는 방식응 이용(oracle에선 Sequence, Mysql에선 Auto Increment)
       : @GeneratedValue라는 어노테이션과 같이 이용해 식별키를 어떤 전략으로 생성하는지 명시, strategy 속성과 generator 속성으로 구분
       : strategy 속성 - AUTO (특정 데이터베이스에 맞게 자동으로 생성되는 방식)
		  - IDENTITY (기본 키 생성 방식 자체를 데이터베이스에 위임하는 방식, 데이터베이스에 의존적인 방식, MySQL에서 주로 많이 사용)
		  - SEQUENCE (데이터베이스의 시퀀스를 이용해 식별키 생성, 오라클에서 사용)
		  - TABLE (별도 키를 생성해 주는 채번 테이블(번호를 취할 목적으로 만든 테이블)을 이용하는 방식
       : generator 속성 - @TableGenerator, @SequenceGenerator
- @Column : 데이터베이스의 테이블을 구성할 때 인스턴스 변수가 컬럼이 되기 때문에 원한다면 컬럼명을 별도로 지정하거나 컬럼 사이즈, 제약 조건들을 추가하기 위해 사용
- @Table : 클래스가 테이블이 되기 때문에 클래스의 선언부에 작성하여 테이블명을 어떻게 지정할지 결정(name 속성 사용), @Table이 지정이 되지 않으면 클래스 이름과 동일한 테이블이 생성
- @Entity : 해당 클래스의 인스턴스들이 엔티티임을 명시
- @CreationTimestamp, @UpdateTimestamp : org.hibernate로 시작하는 패키지, Hibernate의 고유 기능, 엔티티가 생성되거나 업데이트되는 시점의 날짜 데이터를 기록하는 설정
3) application.properties에 JPA 설정
- 스프링부트는 별다른 설정 없이 기본 패키지 하위에 포함된 패키지들을 자동으로 조사하기 때문에 작성된 엔티티용 클래스나 프로젝트와 관련된 추가적인 설정은 필요X
- 대신 JPA와 관련된 설정을 application.properties 파일에 추가
- 설정 중 'spring.jpa.hibernate.ddl-auto'는 데이터베이스에 구조를 생성하는 DDL을 처리하는 옵션을 지정
- 'spring.jpa.show-sql'은 프로그램을 실행할 때 동작하는 SQL문 로그를 보여주기 때문에 true로 지정하고 사용하는 것이 좋음

* JPA 처리를 담당하는 Repository 인터페이스 설계 (PagingAndSortingRepository<T,ID> => CrudRepository<T,ID> => Repository<T,ID>)
- Spring data JPA를 이용하는 경우에는 별도의 클래스 파일을 작성하지 않고 원하는 인터페이스를 구현하는 것만으로도 JPA와 관련된 모든 처리가 끝나게됨 (스프링 프로젝트에서는 DAO라는 개념을 이용했듯이 JPA를 이용하는 경우 Repository라는 용어로 칭함)
- 데이터베이스와 관련된 처리를 전통적인 JPA 처리 방식대로 EntityManager를 구성하고, 트랜잭션을 시작하고 종료하는 코드를 만들 수도 있지만,  Spring data JPA 쪽에는 기능이 복작합 상황이 아닌 이상 간단한 Repository를 구성함
- 모든 인터페이스가 <T,ID> 두 개의 제네릭 타입을 사용하는데, T는 엔티티의 타입 클래스, ID는 식별자(PK)의 타입을 의미, ID는 반드시 java.io.Serializable 인터페이스 타입이여야함
- 가장 상위의 Reporsitory 인터페이스는 아무 기능이 없기 때문에 실제 주로 사용하는 것은 CRUD 작업을 주로 하는 CrudRepository 인터페이스나 페이징 처리, 검색 처리 등을 할 수 있는 PagingAndSortingRepository인터페이스를 사용

* Repository 인터페이스 설계 (인터페이스를 설계한는 것만으로도 많은 기능의 개발이 완료되기 때문에 개발 생산성 향상, 인터페이스 기준으로 해서 동적으로 실행할 수 있는 클래스를 동적으로 생성)
- CrudRepository 메소드 종류
1) log count() : 모든 엔티티 개수
2) void delete(ID) : 식별키를 통한 삭제
3) void delete(Iterable<? extends T> : 주어진 모든 엔티티 삭제
4) void deleteAll() : 모든 엔티티 삭제
5) boolean exists(ID) : 식별키를 가진 엔티티가 존재하는지 확인
6) Iterable<T> findAll() : 모든 엔티티 목록
7) Iterable<T> findAll(Iterable<ID>) : 해당 식별키를 가진 엔티티 목록 반환
8) T findOne(ID) : 해당 식별키에 해당하는 단일 엔티티 반환
9) <S extneds T>Iterable<S> save(Iterable<S>) : 해당 엔티티들의 등록과 수정
10) <S extends T>S save (S entity) : 해당 엔티티의 등록과 수정
- 개발 시 이러한 상속받은 기능에 필요한 메소드를 Repository 인터페이스에 추가하는 형태로 개발하게 됨

* 작성한 엔티티 텍스트
- 스프링부트에서는 프로젝트 생성 시점에서 이미 테스트와 관련된 구성이 완료되기 때문에 별도 작업 없이 바로 테스트 코드를 추가해 작업 가능
- 테스트 코드에는 클래스 선언 밑에 BoardRepository를 주입하고, @Test 어노테이션이 붙은 테스트 코드 작성

* 등록 작업 테스트
- 코드에서 상속한 CrudRepository 인터페이스는 save()라는 메소드를 이용해 데이터베이스에 엔티티 정보를 추가하거나 수정하는 작업 진행
- Repository 쪽에서 save() 라는 메소드가 호출되면, 내부에서는 엔티티매니져가 영속 컨텍스트에 해당 식별키를 가진 엔티티가 존재하는지 확인
- 동일 식별 데이터를 가지는 엔티티가 없다면 엔티티매니저는 이를 영속 컨텍스트에 저장하고, 데이터베이스에도 추가하게 됨
- 반면 식별 데이터를 가지는 엔티티가 이미 존재한다면 메모리에 보관되는 엔티티를 수정하는 작업과 데이터베이스를 갱신(update)하는 작업을 진행
[log]
Create...........
Hibernate: insert into tbl_boards (content, regdate, title, updatedate, writer) values (?, ?, ?, ?, ?)

* 조회 작업 테스트
- 등록 이외 작업을 테스트 하기 전 확인해야할 것은 application.properties 파일의 설정을 확인해야 함, spring.jpa.hibernate.ddl-auto=create 설정은 매번 테이블이 drop되고 생성되기 때문에 기존 데이터를 확인할 수 없어 update나 none으로 바꿔줌
- 조회 테스트 코드는 findById()라는 메소드를 이용, 파라미터 식별 데이터를 사용, JPA는 CrudRepository에서 <T,ID>와 같이 제네릭을 이용하기 때문에 별도 변환 없이 코드 사용 가능
- Board 타입은 식별 데이터를 Long타입으로 사용했으므로 '1L'과 같이 Long 타입으로 파라미터를 지정
- Spring Data JPA는 기본적으로 Hibernate라는 JPA 구현체를 이용함, Hibernate는 내부적으로 지정되는 DB에 맞게 SQL문을 생성하는 Dialect가 존재
- Dialect는 Hibernate가 다양한 데이터베이스를 처리하기 위해 각 데이터베이스마다 다른 SQL 문법을 처리하기 위해 존재
- JPA를 통해 호출하면 설정된 데이터베이스에 맞게 SQL문이 생성되는데 이 역할을 하는 조재를 Dialect라고 함, 내부적으로는 OracleDialect, MySQLDialect같은 클래스 다수 존재
- 프로퍼티에 데이터베이스의 종류를 지정하면 기본적으로 해당 데이터베이스에 맞는 Dialect가 지정되지만 특정 버전을 명시할 수도 있음
- MySQL을 사용하는경우 MySQL용 Dialect가 동작하면서 SQL 문을 생성 (ORM을 프로젝트 도입에 꺼리는 가장 큰 이유, 이와 같이 생성되는 SQL문의 성능 개선을 위한 튜닝 작업의 어려움)
- 조회 작업에는 내부적으로 1차 캐시가 존재, 외부에서 특정한 엔티티를 조회하게 되면 내부에서는 1차 캐시 안에 엔티티가 존재하는지를 살펴보고 없는 경우에 SQL문을 통해 데이터베이스에 가져오게 됨
[log]
Select......
Hibernate: select board0_.bno as bno1_0_0_, board0_.content as content2_0_0_, board0_.regdate as regdate3_0_0_, board0_.title as title4_0_0_, board0_.updatedate as updateda5_0_0_, board0_.writer as writer6_0_0_ from tbl_boards board0_ where board0_.bno=?
result======> Board(bno=2, title=제목1, writer=user00, content=내용1, regdate=2020-08-22 15:31:04.0, updatedate=2020-08-22 15:31:04.0)

* 수정 작업 테스트
- 수정 작업은 등록 작업과 동일하게 sava()메소드를 호출
- 코드를 실행하면 '1번' 게시물을 읽어 들이는 과정이 필요하기 때문에 데이터베이스에서 select문이 동작하면서 데이터를 읽음
- 데이터베이스에서 조회했기 때문에 board변수가 참조하는 객체는 식별 데이터를 가진 상태가 됨, 그 후 select 문과 update가 실행되는 것을 볼 수 있음
- JPA는 데이터베이스에 바로 작업을 하는 JDBC와 달리 스스로 엔티티 객체들을 메모리상에서 관리하고, 필요한 경우에 데이터베이스에 작업을 하게 됨
- 수정과 삭제 작업은 직접 데이터베이스에 SQL문을 실행하는 것이 아니라 엔티티 객체가 우선적으로 메모리상에 존재하고 있어야 함, 이 과정을 위해 'select'가 동작하게 됨
- 관리되고 있는 엔티티 객체가 없어 현재 작성하는 수정과 삭제 작업에는 'select'가 우선으로 실행, 이때 조회한 엔티티와 수정된 엔티티가 동일한 값들을 가지고 있다면 'update'문은 생략
[log]
Read First..................
Hibernate: select board0_.bno as bno1_0_0_, board0_.content as content2_0_0_, board0_.regdate as regdate3_0_0_, board0_.title as title4_0_0_, board0_.updatedate as updateda5_0_0_, board0_.writer as writer6_0_0_ from tbl_boards board0_ where board0_.bno=?
Update Title..................
Call Save()..................
Hibernate: select board0_.bno as bno1_0_0_, board0_.content as content2_0_0_, board0_.regdate as regdate3_0_0_, board0_.title as title4_0_0_, board0_.updatedate as updateda5_0_0_, board0_.writer as writer6_0_0_ from tbl_boards board0_ where board0_.bno=?
Hibernate: update tbl_boards set content=?, regdate=?, title=?, updatedate=?, writer=? where bno=?

* 삭제 작업 테스트
- Spring Data JPA에서는 delete()를 이용해 삭제 처리
- delete()시 파라미터는 식별키 값을 파라미터로 전달해 주거나, 삭제하려는 엔티티 객체를 전달 하는 두 가지 방법이 있음
- delete()의 경우 식별자 타입의 데이터를 전달하고, 해당 식별키를 가진 엔티티가 있다면 삭제됨
- 삭제 작업 테스트 결과를 보면 수정과 마찬가지로 삭제 전 엔티티 객체가 관리되지 않았기 때문에 우선 'select'를 통해 엔티티 객체를 보관하고 이후 'delete'가 실행되는 것을 확인
[log]
DELETE Entity..........
Hibernate: select board0_.bno as bno1_0_0_, board0_.content as content2_0_0_, board0_.regdate as regdate3_0_0_, board0_.title as title4_0_0_, board0_.updatedate as updateda5_0_0_, board0_.writer as writer6_0_0_ from tbl_boards board0_ where board0_.bno=?
Hibernate: delete from tbl_boards where bno=?