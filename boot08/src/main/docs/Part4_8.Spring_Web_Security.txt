#8. Spring Web Security

- 웹 기반 프로젝트에서 사용자 인증을 처리하는 부분은 반드시 필요한 부분임, 스프링의 경우 이러한 작업을 위해 Spring Security를 적용할 수 있음
- 스프링 시큐리티 적용
1) 사용자의 권한에 따른 URI 접근 제어
2) 데이터베이스와 연동하는 로그인 처리
3) 쿠키를 이용한 자동 로그인 (remember-me)
4) 패스워드 암호화

* 인증(Authentication)과 인가(Authorization) 이란?
- 인증 : '증명하다' 라는 의미, 이때 증명의 대상은 어떤 경우에는 표시나 자격일 수도 있고, 사람의 신분일 수도 있음, 예를들어 만일 우리가 암호가 걸려있는 시스템을 사용한다면, 인증 절차를 거쳐야함
          'Pass(지나가다)' 라는 개념과 관련이 있음, 예를 들어 집에 들어가기 전 입력하는 암호 또는 열쇠로 문을 여는 행위가 '인증' 이라고 볼 수 있음, 실제 인증은 보통 자물쇠와 같은 이미지로 표현됨
- 인가 : '권한 부여' 나 '허가'와 같은 의미로 사용, 보안에서는 어떤 대상이 있다면 인가된 사용자만이 보안된 대상을 사용할 수 있다는 의미로 해석

=> 웹에서 '인증' 이란 해당 URL은 보안 절차를 거친 사용자들만이 접근할 수 있다는 의미, '인가' 란 URL에 접근한 사용자가 특정한 자격이 있다는 것을 의미

8.1. 예제 프로젝트 생성
1) 사용자와 사용자의 권한을 관리하는 기능
2) 해당 기능을 이용해 스프링 시큐리티를 적용하는 부분
- 이전 장에서 사용했던 라이브러리들과 더불어, 'security' 항목의 'Spring Security' 추가해 생성, application.properties 수정 (마지막에 security 관련 로그 출력하는 부분에 대한 설정을 'debug'로 설정)

8.1.1. 시큐리티의 기본 설정 추가하기
- 프로젝트에는 스프링 시큐리티가 추가될 것이므로, 시큐리티에 대한 설정 필요, 이를 위해 security 패키지에 클래스 추가
- 생성한 SecurityConfig는 아무런 어노테이션이 적용되지 않은 상태이기 때문에, 스프링의 빈(Bean)으로 인식되지 않음
- 작성된 SecurityConfig가 정상적으로 인식되도록 @EnableWebSecurity 어노테이션을 추가하고, 설정을 담당하는 WebSecurityConfigurerAdapter 클래스를 상속
- 작성된 SecurityConfig 클래스에는 WebSecurityConfigurerAdapter 클래스의 여러 메소드 중 configure() 메소드를 오버라이드해서 간단한 로그 메세지를 출력하도록 작성
- configure() 메소드를 오버라이드하는 경우에는 HttpSecurity 클래스 타입을 파라미터로 처리하는 메소드를 선택한다는 점에 주의
- 어노테이션을 추가한 뒤 SecurityConfig가 스프링의 빈으로 등록되었는지 확인하고, 프로젝트를 실행해 log.info() 부분이 적용되는지 확인 (아무 문제가 없다면 스프링 시큐리티에서 자동으로 생성한 패스워드와 로그가 출력되는 것을 확인O)
[log]
Using generated security password: a5200a1b-e246-4b7c-8273-809b8296aa2d
2020-10-05 23:25:02.574  INFO 19432 --- [  restartedMain] org.zerock.security.SecurityConfig       : security config................
- 스프링 시큐리티는 기본적으로 하나의 사용자 정보를 가지도록 기본 세팅되어 있음, 사용자 이름은 'user', 패스워드는 로그에서 출력되는 정보임
- 만약 SecurityConfig를 생성하지 않고, 컨트롤러와 Thymeleaf를 이용하는 페이지를 제작했다면 스프링 시큐리티는 모든 URI에 대한 인증을 요구
- 이런 경우에는 사용자 이름을 'user'로 지정하고, 서버 실행 시 생성된 패스워드를 입력해 주면 정상적으로 처리, SecurityConfig를 생성하고 config()를 작성했다면 이와 같은 기본 설정은 더 이상 사용하지 않음

8.1.2. 샘플 URI 생성
- 스프링 시큐리티가 정상적으로 사용 가능하다는 것을 확인했다면, 웹상에 시큐리티를 적용하기 위한 컨트롤러와 화면들을 생성해야함 (controller 패키지 생성 후 컨트롤러 생성)
- SampleController는 우선 단순히 몇 개의 페이지를 생성하고 나중에 시큐리티를 적용해서 접근을 제어하는 용도로 사용
- 정상적으로 예제가 동작하기 위해서는 templates에 해당 파일들을 생성, 화면자체는 스프링 시큐리티가 제대로 적용되고 있는지를 확인하는 용도로 사용하는 것이므로 단순한 형태로 작성

8.2. 회원과 권한 설계
- 스프링 시큐리티를 적용하기 위해 실제와 비슷하게 데이터베이스를 이용, 이를 위해 Spring Data JPA를 이용해 서비스를 이용하는 회원과 각 회원이 가지는 권한을 생성해 두도록 함
- 회원에 대한 용어(클래스)는 Member를 이용, 일반적으로 User라는 용어를 사용하는 경우가 흔하지만, User라는 타입은 이미 스프링 시큐리티에서 이용하고 있기 때문에, 혼란을 피하기 위해 Member라는 이름 사용
- 회원(Member)은 등급이나 권한을 가지도록 설계, 실제 서비스에서는 Access Control List(접근 제한 목록 ACL) 라는 것을 작성해 특정 리소스나 작업에 대한 권한을 가진 사용자들만이 접근이나 수정 등 작업을 할 수 있도록 제어
- 프로젝트에서 작성하는 수준은 특정 회원(Member)이 특정한 권한(MemberRole)을 가진다고 가정하고, 특정 URL에 대해 이를 체크하도록 함

8.2.1. 도메인 클래스 설계
- 회원(Member)과 회원 권한(MemberRole)은 클래스로 설계되어야 하므로, domain 패키지에 엔티티 클래스 생성
- Member클래스는 회원의 아이디를 의미하는 uid와 upw, uname 등의 속성을 가지도록 설계 (스프링 시큐리티에서 username, password 등 용어를 사용하므로 가능하면 충돌이 나지 않도록 이름을 지정하는 것이 좋음)
- MemberRole 클래스는 회원이 가지는 권한에 대한 이름을 가지는 단순한 구조임

* 연관관계 설정
- 클래스를 작성했다면 해당 클래스 간의 연관관계를 지정해야 함
<상황정리>
1) Member와 MemberRole은 '일대다', '다대일'의 관계
2) MemberRole 자체가 단독으로 생성되는 경우는 거의 없으므로 Member가 MemberRole을 관리하는 방식의 설계
- MemberRole은 그 자체로는 별다른 의미를 가지지 못하기도 하고, Member에 대한 정보의 라이프사이클과 강하게 묶여 있기 때문에, Member가 MemberRole에 대한 참조를 가지도록 함
- 반면에 MemberRole은 정보에 대한 접근 방식 자체가 '회원'을 통한 접근이므로, 별도의 연관관계를 설정하지 않는 단방향 방식을 선택
- 프로젝트 실행하면 테이블이 생성된 것을 확인할 수 있음
[log]
Hibernate: create table tbl_member_roles (fno bigint not null auto_increment, role_name varchar(255), member varchar(255), primary key (fno)) engine=InnoDB
Hibernate: create table tbl_members (uid varchar(255) not null, regdate datetime, uname varchar(255), updatedate datetime, upw varchar(255), primary key (uid)) engine=InnoDB
Hibernate: alter table tbl_member_roles add constraint FKiy7scif7laghe23vht49x2aka foreign key (member) references tbl_members (uid)

8.2.2. Repository 생성
- Member가 핵심적인 역할을 하기 때문에 Repository 역시 persistence 패키지 생성하고, MemberRepository 작성

8.2.3. 테스트를 통한 데이터 추가/조회
- 테스트를 통해 테이블 간의 연관관계 설정을 좀 더 세밀하게 해 주는 것이 좋음, 테스트 폴더에 Test 클래스 생성
- 작성한 tests 클래스에 테스트에 사용할 데이터를 추가할 수 있도록 코드 추가
- 엔티티들의 영속관계를 한 번에 처리하지 못해서 에러가 발생해, 이에 대한 처리를 cascade 설정을 추가해야 함 (Member클래스)
- testInsert() 코드는 101명의 사용자를 생성, 사용자 중 user0 ~ 80 까지는 BASIC이라는 권한, user90까지는 MANAGER, 나머지 10명은 ADMIN 권한을 가지도록 설계
- 데이터베이스에 정상적으로 데이터가 추가되었으면, 회원 데이터와 함께 권한들에 대한 정보를 같이 조회할 수 있도록 조회 작업 진행
- tbl_members와 tble_members_roles 테이블을 둘 다 조회해야 하기 때문에 에러가 발생 => 즉시 로딩을 이용해 조인을 하는 방식으로 처리 (권한 정보는 회원 정보와 같이 필요한 경우가 많기 때문에, fetch 모드를 즉시 로딩으로 설정)
- testRead()를 실행하면 정상적으로 처리 확인
[log]
Hibernate: select member0_.uid as uid1_1_0_, member0_.regdate as regdate2_1_0_, member0_.uname as uname3_1_0_, member0_.updatedate as updateda4_1_0_, member0_.upw as upw5_1_0_, roles1_.member as member3_0_1_, roles1_.fno as fno1_0_1_, roles1_.fno as fno1_0_2_, roles1_.role_name as role_nam2_0_2_ from tbl_members member0_ left outer join tbl_member_roles roles1_ on member0_.uid=roles1_.member where member0_.uid=?
2020-10-07 23:33:08.388  INFO 12392 --- [           main] org.zerock.MemberTests                   : memberMember(uid=user85, upw=pw85, uname=사용자85, regdate=2020-10-07 23:27:00.0, updatedate=2020-10-07 23:27:00.0, roles=[MemberRole(fno=86, roleName=MANAGER)])

8.3. 단순 시큐리티 적용
- 스프링 시큐리티는 꽤 복잡하고 다양한 설정이 존재하기 때문에, 시큐리티를 학습할 때에는 단계별로 하나씩 과정을 진행해 보는 것이 좋음
- 웹에서의 스프링 시큐리티는 기본적으로 필터 기반으로 동작
- 스프링 시큐리티의 내부에는 상당히 많은 종류의 필터들이 이미 존재하고 있기 때문에, 개발 시에는 필터들의 설정을 조정하는 방식을 주로 사용

8.3.1. 로그인 / 로그아웃 관련 처리
- 가장 먼저 개발해 볼 내용은 로그인하지 않은 사용자가 특정 경로에 접근하는 것을 막고, 로그인과 로그아웃을 처리해 보는 것

1) 특정 권한을 가진 사람만이 특정 URI에 접근하기
- SecurityConfig 클래스에는 configure() 메소드를 이용해 웹 자원에 대한 보안을 확인, 현재까지의 configure()는 HttpSecurity 타입을 파라미터로 사용
- HttpSecurity는 웹과 관련된 다양한 보안 설정을 걸어줄 수 있음
- 특정한 경로에 특정한 권한을 가진 사용자만 접근할 수 있도록 설정하고 싶을 때에는 authorizeRequests()와 antMatches()를 이용해 경로를 설정할 수 있음
- authorizeRequests()는 시큐리티 처리에 HttpServletRequest를 이용한다는 것을 의미
- antMatches()에서는 특정 경로를 지정, 이후 permitAll()은 모든 사용자가 접근할 수 있다는 것을 의미, hasRole()은 시스템상에서 특정 권한을 가진 사람만이 접근할 수 있다는 것을 의미
- http.authorizeRequests() 뒤의 antMatches()는 사실 빌더 패턴으로, 예제에서는 가독성을 높이는 형태로 작성했으나 실제로는 연속적으로 '.(마침표)' 를 이용하는 방법을 더 많이 사용

* Role과 Privilege
- 사전적 의미에서 Role은 '역할' 이나 '자격'을 의미하고, Privilege는 '특권'을 의미
- 스프링 시큐리티에서는 Role 과 Peivilege 외에도 Authority라는 용어를 같이 사용하기 때문에 혼란스러울 수 있음
- Role은 일종의 Privilege들의 묶음, 세부적인 권한을 Privilege나 Authority로 보고, 이를 모아서 하나의 패키지나 템플릿으로 만든 것을 Role이라고 생각할 수 있음
- 이 책에서는 이에 대한 구분 없이 권한이라는 용어를 사용하지만 엄격히는 구분해서 사용하는 것이 정석

=> 변경된 설정이 제대로 적용되는지를 확인하기 위해 프로젝트를 실행하고, '/guest', '/manager' 경로로 접근
- 결과를 보면 '/manager'로 접근하는 경우 'Access Denied' 라는 메세지가 출력됨, 인가 받은 권한이 없기 때문에 해당 경로에 접근할 수 없도록 처리가 됨

2) 로그인 페이지 보여주기
- 인가 받은 권한이 없는 관계로 접근이 막혔다면 '/login'이라는 경로를 이용해 로그인 페이지를 띄워, 로그인을 해야 접근할 수 있다는 걸 인식시킬 필요가 있음
- configure()를 수정 => 마지막에 http.formLogin()이라는 경로를 작성, formLogin()은 form 태그 기반의 로그인을 지원하겠다는 설정, 별도 로그인 페이지를 제작하지 않아도 로그인 정보를 입력하는 페이지를 볼 수 있음
- 브라우저에서 '/login' 경로를 호출하면 스프링 시큐리티에서 제공하는 기본, 로그인 화면을 볼 수 있게 됨 (스프링 시큐리티가 기본으로 제공)

3) 로그인 정보 설정하기
- 화면에 로그인 페이지가 뜨기는 하지만, 어떤 값을 입력하여도 에러가 발생하면서 달라지는 내용은 없음
- 로그인이 되기 위해 SecurityConfig에 AuthenticationManagerBuilder를 주입해 인증에 대한 처리를 해야 함
- AuthenticationManagerBuilder는 단어 뜻 그대로 인증에 대한 다양한 설정을 생성할 수 있음
- 예를 들어, 메모리상에 있는 정보만을 이용한다거나, JDBC나 LDAP등 정보를 이용해 인증 처리가 가능 (예제에서는 메모리상 인증 정보를 활용)
- 설정 완료 후 '/manager'를 호출하면 사용자는 '/login'으로 이동, 로그인 처리가 제대로 되는지 확인하기 위해 아이디, 비밀번호 입력 후 로그인하면 '/manager'의 경로로 이동하고 정상적으로 페이지를 볼 수 있음

4) 로그인 관련 정보 삭제하기
- 웹과 관련된 로그인 정보는 기본적으로 HttpSession을 이용
- HttpSession은 세션 쿠키라는 것을 이용하기 때문에 기존 로그인 정보를 삭제해야 하는 상황에서는 브라우저를 완전히 종료하거나, 세션 쿠키를 삭제하는 방법을 이용 (크롬은 백그라운드에서 동작하는 경우가 있으므로 주의)
- 브라우저에서 기존에 접근한 웹 사이트의 모든 쿠키는 '개발자 도구 -> Application 탭 -> Cookies'를 통해 확인
- 'Cookie' 메뉴 아래 뜨는 사이트를 클릭하면 'Clear' 라는 창을 볼 수 있음, 'Clear'를 클릭하면 해당 사이트에서 받은 모든 쿠키를 삭제할 수 있음, 삭제된 후 다시 원하는 URL을 지정해서 호출할 수 있음
- 이와 같은 방식을 이용하면 매번 테스트 시에 브라우저를 종료하는 시간을 단축할 수 있다는 장점이 있음

5) 커스텀 로그인 페이지 만들기
- 스프링 시큐리티가 기본적으로 <form> 태그가 있는 웹 페이지를 만들어 주기는 하지만 좀 더 제대로 만들기 위해 사용자가 수정할 수 있는 웹 페이지를 만들어주는 것이 좋음
- 이를 위해 formLogin() 이후 loginPage() 메소드를 이용해 URI를 지정해 주면 됨, '/login' 이라는 URI는 더 이상 스프링 시큐리티가 아니기 때문에 직접 컨트롤러를 작성해야함 (login컨트롤러 추가, 화면은 login.html 추가)
- login.html은 크게 로그인에 문제가 생겼을 때 보여주는 부분과 <form> 태그를 이용해서 로그인 정보를 입력하는 부분으로 구성되어 있음
- 스프링 시큐리티는 기본적으로 username 과 password라는 이름을 이용하므로, <input> 태그의 name 속성값을 마음대로 변경할 수 없음
- <form> 태그의 action 속성을 지정하지 않았기 때문에 사용자가 버튼을 클릭하면 '/login'으로 이동하고 POST 방식으로 데이터를 전송하게 됨
- <form> 태그의 내부에는 hidden 속성으로 작성된 '_csrf' 라는 속성이 존재
- 이 속성은 '사이트 간 요청 위조(Cross-site request forgery, CSRF, XSRF)'를 방지하기 위한 것으로 요청을 보내는 URL에서 서버가 가진 동일한 값과 같은 값을 가지고 데이터를 전송할 때에만 신뢰하기 위한 방법
- 실제로 모든 작업은 여러 종류의 Filter 들과 Interceptor를 통해 동작하기 때문에 개발자 입장에서는 적절한 처리를 담당하는 핸들러(Handler)들을 추가하는 것만으로 모든 처리가 완료됨
- 스프링 시큐리티가 적용되면 POST방식으로 보내는 모든 데이터는 CSRF 토큰 값이 필요하다는 점을 명심 (application.properties에 security.enable-csrf 속성을 이용해 CSRF 토큰을 사용하지 않도록 설정할 수 있음)

6) 접근 권한 없음 페이지 처리
- 만일 사용자가 정상적으로 로그인을 하고 접근할 수 있는 권한을 가진 경로를 이용한다면 문제 없지만, 로그인 사용자라도 접근 권한이 없는 특정 경로로 접근하려 할 때는 여전히 'Access is Denied' 라는 메세지를 보게 됨
- '/admin' 으로 접근할 때 'ADMIN'이라는 권한이 있어야만 하는 설정 추가 => 브라우저에서 '/admin'경로로 접근하면 브라우저는 자동으로 '/login'경로로 이동
- 지정한 아이디와 패스워드 (manager/1111) 을 입력하고 로그인하면 여전히 'Access is denied' 라는 메세지를 보게 됨
- 이러한 경우에 사용자에게 권한 없음을 알려주고, 로그인 화면으로 이동할 수 있도록 안내 페이지를 작성할 필요가 있음, 이 설정은 HttpSecurity에서 exception Handling()을 이용해 지정
- exceptionHandling() 이후 메소드는 accessDeniedPage()나 accessDenidedHandler()를 이용하는 것이 일반적, '/accessDenied'라는 URI가 처리할 것이므로, LoginController에 메소드와 html 작성

7) 로그아웃 처리
지금까지 적상적으로 이용한 시나리오는
1) 사용자가 권한이 필요한 URI를 호출하면
2) 권한을 얻기 위해 로그인 페이지로 이동
3) 로그인 이후 원하는 화면을 볼 수 있음

- 스프링 시큐리티가 웹을 처리하는 방식의 기본은 HttpSession이므로 브라우저가 완전히 종료되면, 로그인한 정보를 잃게 됨 (HttpSession은 기본적으로 브라우저가 저장하지 않는 방식)
- 브라우저를 종료하지 않을 경우, 사용자 로그아웃을 행해서 자신이 로그인 했던 모든 정보를 삭제해야 함
- 이를 위해 HttpSession의 정보를 무효화시키고, 필요한 경우에는 모든 쿠키를 삭제해야 함
- logout() 뒤에는 invalidateHttpSession()과 deleteCookies()를 이용해 이러한 처리를 할 수 있음
- 로그아웃을 특정 페이지에서 진행하고 싶다면 먼저 로그아웃을 처리하는 URI를 처리해야 하고, POST 방식으로 로그아웃을 시도해야 함
- SecurityConfig의 configure()에서는 로그아웃을 위한 URI를 지정, http.logout().invalidateHttpSession(true)부분을 수정 후 logout.html 작성
- 로그아웃 처리가 된 후 다시 로그인이 필요한 RUI로 접근해 로그인을 요구하는지 확인

8.4. 다양한 인증 방식
- 스프링 시큐리티를 이용할 때 원하는 방식으로 동작할 수 있도록 하기 위해서는 기본적인 구조에 대한 이해가 필수적 (내부 구조가 복잡)
- 외부에서 인증이 필요하다고 판단되는 경우 가장 필요한 존재는 인증에 대한 실제적인 처리를 담당하는 '인증 매니저(Authentication Manager)'
- '인증 매니저'는 결과적으로 인증과 관련된모든 정보를 UserDetails라는 타입으로 반환하는데, 이를 위해 자신이 어떻게 관련 정보를 처리해야 하는지 판단할 UserDetailsService라는 존재르 ㄹ활용
- 만약 개발자가 인증되는 방식을 수정하고 싶다면, UserDetailsService라는 인터페이스를 구현하고, 인증 매니저에 연결시켜줌
- 결과로 반환되는 UserDetails는 기본적인 사용자 계정과 같은 정보와 더불어 사용자가 어떤 권한들을 가지고 있는지를 Collection 타입으로 가지고 있음

8.4.1. 스프링 시큐리티의 용어에 대한 이해
- 스프링 시큐리티는 사용자의 보안 정보를 확인할 수 있는 다양한 방법을 제공 (이 방식을 이해하기 위해서는 몇 개의 클래스나 인터페이스의 이름에서 사용하는 용어를 이해할 필요가 있음)

1) AuthenticationManager(인증 매니저)
- AuthenticationManagerBuilder(인증 매니저 빌더)
- Authentication (인증)
2) UserDetailsService 인터페이스
- UserDetailsManager 인터페이스
3) UserDetails 인터페이스
- User 클래스

- AuthenticationManager(인증 매니저)는 이전에 작성한 코드와 관련이 있음
- AuthenticationManagerBuilder는 말 그대로 '인증 매니저를 생성하는 빌더' 라고 생각할 수 있음, 이를 이용해 실제로 인증을 처리하는 인증 매니저를 생성
- 예를 들어 auth..inMemoryAuthentication()의 경우 메모리 기반의 인증 매니저를 생성하게 됨
- AuthenticationManagerBuilder는 여러 종류의 인증 매니저들을 생성할 수 있는데, 대표적으로 메모리를 이용하거나 JDBC, LDAP등 사용하는 인증 매니저들을 생성할 수 있고
- 각 인증 매니저는 인증(Authentication)이라는 처리를 할 수 있도록 authenticate()라는 메소드를 구현
- 인증 매니저가 사용하는 UserDetailsService는 실제로 인증/인가 정보를 처리하는 주체를 의미
- 예를 들어, API 중에 앞의 예제에서 사용하는 메모리상에서 인증/인가 정보를 처리하는 InMemoryUserDetailsManager의 경우 UserDetailsService 인터페이스를 구현하고 있는 것을 볼 수 있음
- UserDetailsService 인터페이스는 인증의 주체에 대한 정보를 가져오는 하나의 메소드만 존재
- 단순히 loadUserByUsername()이라는 메소드만으로 상세 정보를 조회하는 용도일 뿐이고 추가적 작업은 없음
- loadUserByUsername() 메소드는 UserDetails라는 인터페이스 타입을 반환, UserDetails는 '사용자의 계정 정보 + 사용자가 가진 권한 정보'의 묶음
* 정리
1) 모든 인증은 인증 매니저를 통해서 이루어짐, 인증 매니저를 생성하기 위해 인증 매니저 빌더 라는 존재가 사용
2) 인증 매니저를 이용해서 인증이라는 작업이 수행
3) 인증 매니저들은 인증/인가를 위한 UserDetailsService를 통해 필요한 정보들을 가져옴
4) UserDetails는 사용자의 정보 + 권한 정보들의 묶음

8.4.2. JDBC를 이용한 인증처리
- 메모리상에 있는 제한적인 정보를 이용해 로그인/로그아웃을 처리해 주었다면, 다음으로 데이터베이스를 연동하고 실제 정보를 이용해서 로그인을 진행해 보아야 함 (JdbcUserDetailsManagerConfigurer라는 객체를 이용)

* 스프링 시큐리티가 데이터베이스를 연동하는 방법
1) 직접 SQL등을 지정해서 처리하는 방법
2) 기존 작성된 Repository나 서비스 객체들을 이용해 별도로 시큐리티 관련 서비스를 개발하는 방법

- 1)은 DataSource와 SQL을 이용해 처리하는 방법임, 이를 위해서는 우선적으로 DataSource 타입의 객체를 주입해야함
- 사용자에 대한 계정 정보와 권한을 체크하는 부분에는 DataSource를 이용하고 SQL을 지정하도록 작성
- 이때 SQL문은 사용자의 계정 정보를 이용해 필요한 정보를 가져오는 SQL과 해당 사용자의 권한을 확인하는 SQL이 필요
- auth.jdbcAuthentication() 메소드는 JdbcUserDetailsManagerConfigurer 객체를 반환하게 됨
- 이 객체를 이용해 DataSource를 주입하고, 필요한 SQL문을 파라미터로 전달하는 방식을 이용해 단순한 몇 가지의 설정만으로 인증 매니저를 생성하게 됨
- 가장 핵심이 되는 메소드는 usersByUsernameQuery()와 authoritiesByUsernameQuery()라는 메소드, username을 이용해 특정한 인증 주체(사용자) 정보를 세팅하고, username을 이용해 권한에 대한 정보를 조회
- 스프링 시큐리티에서 가장 주의해야 하는 용어는 username, 설계 시에는 아이디(id)와 같은 식별 데이터를 이용하지만, 스프링 시큐리티에서는 username이라는 용어로 사용
- userByUsernameQuery()를 이용하는 경우에는 우선 username과 password, enabled 라는 칼럼의 데이터가 필요, 실제 테이블의 칼럼명과 다를 경우에는 SQL에서는 칼럼에 alias(가명)를 적용해서 처리할 수 있음
- Enabled 칼럼은 해당 계정이 사용 가능한지를 의미(만일 적절한 데이터가 없다면 무조건 true를 이용하도록 설정하면 됨)
- 세 가지의 데이터를 가져온 후에 실행되는 authoritiesByUsernameQuery()의 파라미터로 사용되는 SQL은 실제 권한에 대한 정보를 가져오는 SQL임
- 이때 사용하는 SQL은 username 하나의 파라미터를 전달하고, username과 권한 정보를 처리하도록 작성
- 프로젝트를 실행한 후 '/manager'를 호출하면 당연히 '/login'으로 이동, 이때 로그 확인
[log]
2020-10-11 02:16:59.985 DEBUG 5996 --- [nio-8080-exec-3] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/manager'; against '/guest/**'
2020-10-11 02:16:59.985 DEBUG 5996 --- [nio-8080-exec-3] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/manager'; against '/manager/**'
2020-10-11 02:16:59.985 DEBUG 5996 --- [nio-8080-exec-3] o.s.s.w.a.i.FilterSecurityInterceptor    : Secure object: FilterInvocation: URL: /manager; Attributes: [hasRole('ROLE_MANAGER')]
- 로그를 보면 '/manager'라는 경로로 접근하려면 'ROLE_MANAGER'라는 이름의 권한이 필요한 것을 알 수 있음
- 반면 데이터베이스에는 'ROLE_'이라는 문자열은 없고, 단순히 'BASIC, MANAGER, ADMIN'과 같은 이름으로 저장되어 있음, 따라서 rolePrefix()라는 메소드를 이용해 'ROLE_'라는 문자열을 붙여줌
- 사용자가 데이터베이스에 존재하는 username과 password 정보를 입력하고 로그인을 시도하면 로그가 출력
[log]
2020-10-15 22:37:54.408 DEBUG 21384 --- [io-8080-exec-10] o.s.s.w.a.i.FilterSecurityInterceptor    : Secure object: FilterInvocation: URL: /manager; Attributes: [hasRole('ROLE_MANAGER')]
2020-10-15 22:37:54.408 DEBUG 21384 --- [io-8080-exec-10] o.s.s.w.a.i.FilterSecurityInterceptor    : Previously Authenticated: org.springframework.security.authentication.UsernamePasswordAuthenticationToken@ff09370b: 
Principal: org.springframework.security.core.userdetails.User@ce2b2c0b: Username: user88; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; 
Granted Authorities: ROLE_MANAGER; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@0: RemoteIpAddress: 0:0:0:0:0:0:0:1; 
SessionId: BBAECC5953124BC8161CFD60DDC883B3; Granted Authorities: ROLE_MANAGER
- 출력되는 내용을 보면 Username, Password, Enabled, AccountNonExpired.... 등의 다양한 속성을 가진 userdetailsUser 타입의 객체가 만들어진 것을 짐작

8.4.3. 사용자 정의(custom) UserDetailsService 작성하기
- 앞서 출력된 로그를 보면 스프링 시큐리티가 필요한 객체는 'userdetails.User' 타입의 객체를 만들어내는 것임을 알 수 있음 (User 클래스는 UserDetails라는 인터페이스를 구현해서 보다 상세한 사용자 정보를 처리)
- 모든 인증 매니저는 결과적으로 UserDetails 타입의 객체를 반환하도록 구현하는데, 개발자가 인증 매니저를 커스터마이징하려면 UserDetailsService인터페이스를 구현하고, 이를 HttpSecurity 객체가 사용할 수 있도록 지정
- API에서 UserDetiailsService를 보면 이미 여러 클래스가 UserDetailsService를 구현해 두었고, 앞의 예제들이 내부적으로 이를 활용한다는 것을 짐작
- 본인이 원하는 방식으로 인증을 처리하고 싶다면 가장 먼저 UserDetailsService 인터페이스르르 구현하는 새로운 클래스를 정의해야 함
- security 패키지 내에 ZerockUsersService라는 클래스 생성 (UserDetailsService 인터페이스를 구현)
- ZerockUsersService는 @Service 어노테이션이 추가되어 있으므로, 스프링에서 빈으로 처리
- SecurityConfig에서는 만들어진 ZerockUsersService 객체를 주입받을 수 있도록 처리 (기존 DataSource는 사용 안함으로 제거)
- ZerockUsersService를 이용하게 되면 기존 설정은 의미가 없으므로 configureGlobal() 메소드는 사용하지 않도록 제거할 수 있음
- SecurityConfig의 configure()에서 사용하는 HttpSecurity 객체는 ZerockUsersService를 이용할 것이므로, configure()메소드 수정

* 간단한 커스텀 UserDetailsService 사용하기
- 인증을 처리할 때 새롭게 생성한 ZerockUsersService를 이용하므로, 간단한 코드를 추가해 인증이 정상적으로 처리되는지를 확인해야 함
- UserDetailsService의 loadUserByUsername()은 사용자의 계쩡 정보(아이디)를 이용해 UserDetails 인터페이스를 구현한 객체를 반환해야 함, 스프링 시큐리티의 API에는 UserDetails 인터페이스를 구현해 둔 몇 개의 클래스가 존재함
- 원한다면 UserDetails 엔터페이스를 직접 구현하는 방식을 사용해보는 것도 좋지만, UserDetails 인터페이스는 생각보다 많은 메소드가 존재하므로, 예제에서는 간편하게 UserDetails를 구현해 둔 User 클래스를 이용
- User 클래스는 username과 password, Authority라는 정보만을 이용하는 간단한 생성자를 제공 (Authority는 '권한'을 의미)
- loadUserByUsername()의 내부에서 User 클래스를 이용해서 객체 생성, 이때 User 클래스의 인스턴스는 Collection(Authority>를 가질 수 있으므로, Arrays.asList()를 이용해 여러 권한을 부여할 수 있음
- SimpleGrantedAuthority 클래스는 GrandtedAuthority라는 인터페이스의 구현체, GrandtedAuthority 인터페이스는 문자열을 반환하는 getauthority()메소드 하나만을 가지고 있음
- 예제에서는 simplegrantedAuthority 클래스를 이용해 'ROLE_MANAGER'라는 문자열이 반환되고록 설계
- 작성한 ZerockUsersService를 테스트하기 위해 프로젝트를 실행하고, '/manager'의 경로로 접근해 로그인 (username은 아무값, 패스워드는 1111)

* MemberRepository와 연동
- 간단하게 ZerockUsersService가 정상적으로 동작하는 것을 확인했다면, 이 장의 앞에서 만ㄷ르어 둔 MemberRepository와 연동작업을 처리
- 이 연동 작업에서 가장 고민이 되는 것은 MemberRepository는 Member 클래스와 MemberRole이라는 클래스를 사용할 뿐 스프링 시큐리티의 User나 GrantedAuthority 같은 인터페이스 타입은 사용하지 않는다는 것
- 우선 ZerockUsersService에 MemberRepository 인스턴스를 주입
- MemberRepository의 findById()는 PK를 이용해 Member 엔티티 인스턴스를 얻어오지만, UserDetails 라는 리턴 타입에는 맞지 않음
- Member 타입의 인스턴스를 UserDetails로 처리하려면
1) Member 클래스에 UserDetails 인터페이스를 구현해 주는 방법
2) Member 클래스가 이미 UserDetails 인터페이스를 구현한 User 클래스를 상속
3) 조합을 이용해 Member를 포함하는 별도의 클래스를 만드는 방법 사용
- 만약 1)과 같이 Member 클래스에 UserDetails 인터페이스를 구현한다면 Useretails 인터페이스의 모든 메소드를 구현해야 하는 불편함이 있음
- 2) 방식은 생성자를 추가해야 하는 불편함이 있고, 1)과 마찬가지로 기존 완성된 코드를 수정한다는 단점 존재
- 개인적으로는 3)과 같이 별도 클래스를 만들고, Member의 인스턴스를 감싸는 형태의 클래스 선호, 이 방법을 이용하면 Member의 모든 정보를 추가적으로 사용해야 하는 상황에 유용하는 장점

* ZerockSecurityUser 클래스 생성
- ZerockUsersService에서는 Member타입의 인스턴스를 이용해 ZerockSecurityUser를 생성할 것이므로, ZerockSecurityUser는 Member를 이용하도록 수정할 필요가 있음
- ZerockUsersService에서는 ZerockSecurityUser를 사용하도록 수정
- 수정된 코드를 저장하고 재시작되면 '/manager' 나 '/admin' 경로에 접근할 때 데이터베이스에 있는 정보를 활용하는지 확인

8.5. 화면에서 로그인한 사용자 정보 사용하기
- 커스텀 UserDetailsService를 이용해 특정한 경로에 접근하는 것을 통제할 수 있다는 것을 확인하였다면 로그인한 사용자의 정보를 화면에서 보여주는 기능을 구현해야함
- 스프링 시큐리티의 정보를 Thymeleaf에서 사용하기 위해서는 Spring Security Dialect라는 것을 이용해야 함
- 메이븐을 이용해 필요한 라이브러리 추가, 해당 링크에서는 Thymeleaf로 작성된 화면에서 어떤 식으로 사용하는지에 대한 설명을 포함하고 있기 때문에, 개발시 항상 참고하는 것이 좋음
- 라이브러리는 스프링 시큐리티의 버전에 따라 구분되어 있기 때문에 현재 프로젝트에 맞는 버전을 pom.xml에 추가해 주어야 함

8.5.1. Thymeleaf에서 스프링 시큐리티 처리하기
- Thymeleaf로 작성된 페이지에서 스프링 시큐리티 이용하는 순서
1) 시큐리티 관련 네임스페이스 추가
2) 네임스페이스를 이용한 태그 작성
- 이 구성을 사용하기 위해 '/admin' 경로에서 사용하는 'admin.html'을 이용해서 화면에 현재 로그인한 사용자의 정보를 처리
- Thymeleaf의 설정 부분에 시큐리티 관련 네임스페이스를 지정, 네임스페이스는 'sec'로 시작
- 현재 로그인한 사용자의 이름을 출력하고 싶다면 '[[${#~~}]]' 과 같이 작성할 수 있음, 인라인 스타일은 '.(마침표)'를 이용해 처리
- 로그인한 username 정보는 실제 데이터베이스에서는 uid에 해당하므로 uid 값이 출력됨
- 화면 쪽에서 많이 처리하는 기능 중 하나가 특정한 권한을 가진 사용자에게만 버튼이나 링크가 보이도록 하는기능 (authorize-url 이용)
- 예를 들어, 현재 '/admin' 경로에 들어온 사용자는 '/admin/aaa' 에는 접근할 수 있지만, '/manager/aaa'에는 접근할 권한이 없음 (authorize-url 이용)
- 화면에 접근한 사용자는 '/manager/aaa'라는 경로에 접근할 수 없으므로 화면에서는 보이지 않게 됨
- 이와 비슷하게 특정 권한을 가진 사용자들에게만 보여주어야 할 내용이 있다면 'hasRole()' 표현식을 그대로 적용할 수 있음
- 시큐리티 관련된 내용은 이와 같은 형태로 사용하지만, Member처럼 실제 데이터베이스상의 사용자 정보를 포함하는 경우에는 principal 이라는 속성을 이용해야함
- 이 코드를 추가한 상태에서 화면을 보면 ZerockUsersService에서 반환한 ZerockSecurityUser 객체가 출력되는 것을 확인할 수 있음
- 로그인된 회원 정보는 #authentication.principal 내부에 존재하므로 #authentication.principal.member와 같이 '.(마침표)'를 이용해 접근할 수 있음 (이런 이유로 ZerockSecurityUser에 @Getter를 추가해둠)
- Member는 ZerockSecurityUser의 내부에 속성으로 추가되어 있기 때문에 principal.member와 같이 접근할 수 있음
- Member 인스턴스의 정보를 출력해 주는 표현식이 너무 길다고 판단되면 'th:with'를 지정해 간단히 사용할 수 있음

8.6. Rememer-Me 인증하기
- 웹에서의 로그인 처리는 크게 HttpSession을 이용하는 방식과, 쿠키(Cookie)를 이용하는 방식이 있음
- HttpSession을 이용하는 방식을 흔히 '세션 방식'이라고 함
- 세션 방식은 모든 데이터를 서버에 보관하고, 브라우저는 단순히 '키(Key)'에 해당하는 '세션ID'만을 이용하기 때문에 좀 더 안전하다는 장점이 있지만, 브라우저가 종료되면 사용할 수 없기 때문에 모바일과 같은 환경에서는 불편함
- 쿠키를 이용하는 방식은 브라우저에 일정한 정보를 담은 '쿠키'를 전송하고, 브라우저는 서버에 접근할 때 주어진 쿠키를 같이 전송함
- 이때 서버에서는 쿠키에 유효기간을 지정할 수 있기 때문에 브라우저가 종료되어도 다음 접근 시 유효기간이 충분하다면 정보를 유지할 수 있음
- 'Remember-me'는 최근 웹 사이트에서는 '로그인 유지(자동로그인)'라는 이름으로 서비스되는 기능, 이 방식은 쿠키를 이용해 사용자가 로그인했던 정보를 보관하는 방식
- 스프링 시큐리티의 Remember-me 기능은 기본적으로 사용자가 로그인했을 때의 특정한 토큰 데이터를 2주간 유지되도록 쿠키를 생성, 브라우저에 전송된 쿠키를 이용해 로그인 정보가 필요하면 저장된 토큰을 이용해 다시 정보를 이용

8.6.1. 로그인 화면에서 'remember-me' 체크박스 처리
- 로그인 페이지에서 체크박스를 만들어 처리 (name 속성값 'remember-me'로 지정)

8.6.2. SecurityConfig에서의 설정
- 'remember-me' 기능을 설정하기 위해서 UserDetailsService를 이용해야 한다는 조건이 있지만, 이미 앞에서 만들어 두었기 때문에 HttpSecurity 인스턴스에 간단히 rememberMe()를 이용해 주면 처리 가능
- rememberMe()에서는 쿠키의 값으로 암호화된 값을 전달하므로, 암호의 '키(key)'를 지정하여 사용
- SecurityConfig의 설정이 완료되고, 로그인 화면에서 'remember-me'를 선택한 후 로그인하면 브라우저상에는 기본적인 JSESSIONID(톰캣 생성 세션 키)의 쿠키 외에도 'remember-me'라는 이름의 쿠키가 생성되는 것을 확인할 수 있음
- 생성된 'remember-me' 쿠키의 Expires(유효기간)는 '로그인 시간 + 2주', 쿠키는 유효기간이 설정되면 브라우저 내부에 저장됨
- 따라서 사용자가 브라우저를 종료하고 다시 서버상의 경로에 접근하게 되면 자동으로 생성된 JSESSIONID 쿠키는 없지만, 브라우저는 보관된 'remember-me'쿠키는 그대로 가지고 서버에 접근하게 됨
- 브라우저에서 전송하는 정보를 보면 저장된 'remember-me' 쿠키의 유효기간이 지나지 않았으므로, 서버에 접근할 때 같이 전송되는 것을 볼 수 있음
- 'remember-me' 쿠키는 기본적으로 로그아웃 시점에 같이 삭제되기 때문에 별도의 처리 없이도 자동으로 삭제됨










