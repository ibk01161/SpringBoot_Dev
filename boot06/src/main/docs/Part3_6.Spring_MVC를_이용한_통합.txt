#6. Spring MVC를 이용한 통합

6.1. 프로젝트의 기본 구조 생성하기
- Spring Starter Project 메뉴를 이용해서 프로젝트 생성, 기존 라이브러리 추가, Thymeleaf 레이아웃 라이브러리 추가
- application.properties 파일은 기존 사용했던 설정들 사용

6.1.1. 레이아웃 분리해 두기
- 프로젝트에서 사용할 페이지를 레이아웃 기능을 이용할 수 있도록 분리
- templates 폴더에 layout 폴더 생성, static 폴더의 내용 추가

* 부트스트랩 추가해 두기
- HTML5 Boilderplate는 프로젝트의 기본 구조를 생성할 때는 유용하지만, 각 화면을 구성하는 데에는 CSS가 필요하므로, 부트스트랩 이용
- 부트스트랩의 CSS와 JavaScript 관련 링크를 layout1.html에 추가
- layout1.html은 여러 페이지에서 사용하는 레이아웃을 의미하므로, 부트스트랩의 panel 이라는 것을 이용해 전체 화면 구성에 사용
- 상단에는 간단한 문자들을 보여주고, 레이아웃의 내용물은 부트스트랩의 panel이라는 것으로 처리하도록 변경

6.1.2. 컨트롤러 생성 및 화면 확인하기
- 프로젝트의 기본 구조가 완성되었다면, 생성된 프로젝트의 모습을 확인할 수 있는 기본 컨트롤러를 작성해 실제 화면 테스트 (컨트롤러 작성)
- 컨트롤러 선언부에는 @Controller, @RequestMapping을 지정, 개발 시 로그를 출력하는 기능인 Lombok의 @Log 어노테이션도 추가
- 먼저 게시물의 리스트 기능 부터 작성
- 우선 해당 URI에 맞는 html 페이지를 templates 폴더 아래 작성, 경로에 해당하는 'boards'라는 폴더 생성 후 그 안에 list.html 파일 생성
- list.html은 부트스트랩의 간단한 스타일을 이용해서 Panel을 구성, 'panel-heading' 등 이용해서 화면에 간단한 스타일을 줌
- 'localhost:8080/boards/list'를 통해 레이아웃이 정상적으로 적용되는지 확인

6.1.3. 엔티티 클래스와 Repository 설계
- 프로젝트는 작게 하나의 테이블을 이용하는 단일 엔티티 클래스를 구성하는 것으로 시작 하는 것이 좋음
- domain 패키지 생성 후 엔티티 클래스 설계, Repository는 persistence 패키지에 Repository 클래스 추가

6.1.4. Querydsl 설정
- 게시물의 검색에는 동적 쿼리를 이용해 처리할 것이므로 pom.xml에 Querydsl 관련 라이브러리와 코드생성 플러그인 추가
- QueryDsl과 관련된 설정이 끝나면 프로젝트 내에 'target/generated-resource/java'가 생성된 것을 확인하고, Qdomain인 QWebBoard.java가 생성된 것을 볼 수 있음

* Maven으로 빌드하는 경우
- Maven을 이용하는 경우 명령어를 이용해야함
- Run As에서 Maven Build => new => 빌드 이름 : Code Gen, Base Directory : 'Workspace를 이용' ${worksspace_loc:/boot06}, Goals : eclipse:eclipse 설정 후 apply
=> Console 타이틀은 'Code Gen' 으로 지정되고, 프로젝트가 빌드되는 것을 확인할 수 있음

- 검색 기능을 구현할 때 사용할 수 있도록 WebBoardRepository에 QueryDsl 관련 인터페이스 추가

6.1.5. 테스트 코드 작성
- 작성한 Repository는 가능하면 테스트를 이용, test 폴더에 test클래스 생성 후 테스트 관련 어노테이션, @Log, @Commit 등을 미리 추가하고 Repository 인터페이스 주입

* 더미 테스트 추가
- insertDummies()는 1부터 300까지 bno값을 가지는 데이터 생성 후 데이터베이스에 정상적으로 insert 됐는지 확인
- 항상 본격적인 개발 전 테스트용 더미 데이터를 넣어주는 과정을 개발 단계에 포함해 주는 것이 좋음

6.2. 페이징, 검색 처리
- 프로젝트의 기본 구성이 완성되었고, 기능을 테스트할 수 있는 데이터들이 있다면 먼저 리스트를 구현하도록 함 (리스트 구성은 단순 페이징과 검색 조건의 처리)

6.2.1. Repository 페이징 테스트
- 페이징에 대한 테스트는 QuerydslPredicateExecutor의 findAll()을 이용해 작성하고, Pageable을 사용
- QuerydslPredicateExecutor의 findAll()은 Predicate 타입의 파라미터와 Pageable을 파라미터로 전달받을 수 있음
- 파라미터로 전달하는 Predicate는 QWebBoard를 이용해 작성해야 함, 이를 위해 간단히 검색 조건과 키워드를 전달하면 Predicate를 생성하는 코드를 작성
- Java8 버전부터는 인터페이스에 'default 메소드'를 추가해 코드를 추가할 수 있으므로, default 키워드를 이용해 인터페이스에서 직접 메소드의 내용을 구현해 줄 수 있음
- makePredicate()는 검색에 필요한 타입 정보와 키워드를 이용해 적당한 쿼리를 생성 (아직 다양한 조건에 대한 처리가 없으므로 단지 'where bno > 0' 이라는 조건만 생성) 후 테스트 코드 작성
- testList1()은 아직 검색 조건을 지정하지 않은 상태의 단순 페이징 처리, findAll()을 할 때 Predicate를 생성하는 부분에서 repos.makePredicate() 주의깊게 확인
[log]
Hibernate: select webboard0_.bno as bno1_0_, webboard0_.content as content2_0_, webboard0_.regdate as regdate3_0_, webboard0_.title as title4_0_, webboard0_.updatedate as updateda5_0_, webboard0_.writer as writer6_0_ from tbl_webboards webboard0_ where webboard0_.bno>? order by webboard0_.bno desc limit ?
Hibernate: select count(webboard0_.bno) as col_0_0_ from tbl_webboards webboard0_ where webboard0_.bno>?
------------------------------------------------------------------
PAGE : Page request [number: 0, size 20, sort: bno: DESC]
------------------------------------------------------------------
WebBoard(bno=300, title=Sample Board Title 299, writer=user09, content=content Sample...299 of Board , regdate=2020-09-12 03:16:15.0, updatedate=2020-09-12 03:16:15.0)
WebBoard(bno=299, title=Sample Board Title 298, writer=user08, content=content Sample...298 of Board , regdate=2020-09-12 03:16:15.0, updatedate=2020-09-12 03:16:15.0)
WebBoard(bno=298, title=Sample Board Title 297, writer=user07, content=content Sample...297 of Board , regdate=2020-09-12 03:16:15.0, updatedate=2020-09-12 03:16:15.0)
WebBoard(bno=297, title=Sample Board Title 296, writer=user06, content=content Sample...296 of Board , regdate=2020-09-12 03:16:15.0, updatedate=2020-09-12 03:16:15.0)
...
WebBoard(bno=282, title=Sample Board Title 281, writer=user01, content=content Sample...281 of Board , regdate=2020-09-12 03:16:15.0, updatedate=2020-09-12 03:16:15.0)
WebBoard(bno=281, title=Sample Board Title 280, writer=user00, content=content Sample...280 of Board , regdate=2020-09-12 03:16:15.0, updatedate=2020-09-12 03:16:15.0)

* 검색 조건 처리
- 검색 조건이 없을 때 페이지 처리에 이상이 없는 것을 확인했으면, 검색 조건에 맞게 남은 부분 구현
- makePredicate()는 파라미터로 전달되는 문자열을 이용해 switch를 처리하는 단순한 구조
- 이러한 정도의 분기는 컨트롤러에서 다른 메소드를 호출하도록 처리할 수 있지만, 복잡한 연산을 처리해야 하는 상황에서는 이와 같은 구조가 조금 더 유용
- testList2()의 검색 조건은 '제목'dp '10'이라는 문자열이 포함된 WebBoard 객체들에 대한 검색
[log]
Hibernate: select webboard0_.bno as bno1_0_, webboard0_.content as content2_0_, webboard0_.regdate as regdate3_0_, webboard0_.title as title4_0_, webboard0_.updatedate as updateda5_0_, webboard0_.writer as writer6_0_ from tbl_webboards webboard0_ where webboard0_.bno>? and (webboard0_.title like ? escape '!') order by webboard0_.bno desc limit ?
------------------------------------------------------------------
PAGE : Page request [number: 0, size 20, sort: bno: DESC]
------------------------------------------------------------------
WebBoard(bno=211, title=Sample Board Title 210, writer=user00, content=content Sample...210 of Board , regdate=2020-09-12 03:16:14.0, updatedate=2020-09-12 03:16:14.0)
WebBoard(bno=111, title=Sample Board Title 110, writer=user00, content=content Sample...110 of Board , regdate=2020-09-12 03:16:14.0, updatedate=2020-09-12 03:16:14.0)
WebBoard(bno=110, title=Sample Board Title 109, writer=user09, content=content Sample...109 of Board , regdate=2020-09-12 03:16:14.0, updatedate=2020-09-12 03:16:14.0)
WebBoard(bno=109, title=Sample Board Title 108, writer=user08, content=content Sample...108 of Board , regdate=2020-09-12 03:16:14.0, updatedate=2020-09-12 03:16:14.0)
...
WebBoard(bno=101, title=Sample Board Title 100, writer=user00, content=content Sample...100 of Board , regdate=2020-09-12 03:16:14.0, updatedate=2020-09-12 03:16:14.0)
WebBoard(bno=11, title=Sample Board Title 10, writer=user00, content=content Sample...10 of Board , regdate=2020-09-12 03:16:13.0, updatedate=2020-09-12 03:16:13.0)

6.2.2. 컨트롤러의 페이징 처리
- Repository 에서 페이징과 검색에 대한 처리가 완료되었으므로, 이제 컨트롤러에서 파라미터를 전달하고, 연동해서 결과를 처리해야함
* 웹 화면에서 전달되는 데이터
- 페이지 관련 : 페이지 번호 (page-0, 1, 2, 3...), 페이지당 사이즈 (size - PageRequest의 기본 size는 20)
- 검색 관련 : 검색 종류 (type), 검색 키워드 (keword)

* @PageableDefault를 이용한 페이지 처리
- 우선 간단히 컨트롤러에서 list()에 페이지 관련 처리를 위한 파라미터 추가
- 페이징 처리에는 Pageable 타입을 이용하는 것이 가장 간단하지만, 매번 페이지 처리를 할 때마다 size나 directino 등을 지정해야 하는 경우 매번 여러 개의 파라미터를 전달해서 불편할 수 있음
- Spring Data 모듈에서는 컨트롤러에서 파라미터 처리에 편리하도록 만들어진 @PageableDefault 어노테이션을 이용하면 간단하게 Pageable타입의 객체를 생성 할 수 있음
- 작성된 프로젝트를 실행하고 '/boards/list' 를 호출하면 다음과 같은 로그를 확인 할 수 있음
[log]
2020-09-13 15:25:27.268  INFO 13096 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------
2020-09-13 15:25:27.269  INFO 13096 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : list() called.....Page request [number: 0, size 10, sort: bno: DESC]
2020-09-13 15:25:27.270  INFO 13096 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------

- 만약 브라우저에서 '/boards/list' 뒤에 'page' 나 'size' 파라미터를 추가하면 자동으로 파라미터가 수집되어 Pageable 객체가 만들어지는 것을 확인할 수 있음
[log]
2020-09-13 15:26:01.658  INFO 13096 --- [nio-8080-exec-8] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------
2020-09-13 15:26:01.658  INFO 13096 --- [nio-8080-exec-8] o.zerock.controller.WebBoardController   : list() called.....Page request [number: 2, size 20, sort: bno: DESC]
2020-09-13 15:26:01.658  INFO 13096 --- [nio-8080-exec-8] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------

- URL 뒤에 'sort=aaa:desc' 와 같은 파라미터를 추가하면 정렬 관련 설정이 추가되는 것을 볼 수 있음

* PageVO를 생성하는 방식
- @PageableDefault를 이용하는 방법이 편리하긴 하지만 몇 가지 신경 쓰이는 점들이 있음
1) 우선 페이지 번호가 0부터 시작하기 때문에 일반 사용자들에게는 직관적이지 않음
2) 파라미터를 이용해서 size를 지정할 수 있기 때문에 고의적으로 size값을 크게 주는 것을 막을 수 없다는 점
3) 기타 정렬 방향이나 속성 역시 모두 브라우저에서 전달되는 값을 통해 조절할 수 있기 때문에 고의적인 공격에 취약하다는 점
=> 이 방식 보다는 별도로 파라미터를 수집해 처리하는 Value Object를 생성하는 방식이 이러한 문제를 줄여줄 수 있음
- vo 패키지를 생성하고, PageVO 라는 클래스를 생성
- PageVO는 브라우저에서 전달되는 값은 페이지 번호(page)와 게시물의 수(size)만을 받도록 설계하고, 일정 이상의 값이 들어올 수 없도록 제약을 둠, 이후 정렬 방향이나, 정렬 기준이 되는 속성은 컨트롤러에서 저장
- VO에서 가장 주목해야 하는 부분은 makePageable() 메소드임, 전달되는 파라미터를 이용해 최종적으로 PageRequest로 Pageable 객체를 만들어 냄, 이때 브라우저에서 전달되는 page 값을 1 줄여서 Pageable 타입을 생성
- 컨트롤러에 list() 내에서 vo에 있는 makePageable() 메소드 호출하게 수정
- 브라우저에서 전달되는 파라미터들은 자동으로 PageVO로 처리, 이때 페이지 번호(page), 페이지당 개수(size)가 처리되고, 정렬방향과 정렬대상의 컬럼은 컨트롤러에서 처리
- Pageable을 얻기 위해 vo,makePageable() 코드를 한 줄 추가해야 하지만, 어노테이션을 사용하는 것에 비해 간결할 수 있음
- 브라우저에서 '/boards/list' 혹은 '/boards/list?page=2' 와 같은 형태로 호출하게 되면 서버의 내부에서는 페이지 번호가 자동으로 1이 감소된 형태로 Pageable 타입의 객체를 사용할 수 있음

* Repository와의 연동 처리
- 컨트롤러에서 Pageable 타입의 객체에 대한 처리가 끝났다면 WebBoardRepository와의 연동 작업을 처리
- 일반적으로 스프링 프로젝트를 진행할 때에는 'Controller -> Service -> Repository' 계층을 거치도록 설계하지만, 스프링 부트의 경우 짧은 시간에 개발을 목적으로 하는 경우가 많기 때문에 Service를 생략하는 경우도 많음
- 예제에서도 별도 Service 계층을 설계하지는 않고, 직접 'Controller -> Repository'를 연동하는 형태로 제작
- 먼저 WebBoardController에 @Autowired를 이용해 Repository를 주입하고 list()에서 호출하도록 변경
- 변경된 list()는 파라미터로 Model을 전달받고 Repository를 이용해 페이지 처리를 진행한 결과를 'result'라는 이름의 변수로 처리, 아직은 검색 조건에 대한 처리가 없기 때문에 makePredicate()에는 null 로 처리
- 입력한 코드를 브라우저에서 제대로 출력하도록 templates의 'boards/list.html'를 수정 후 호출하면 1페이지에 해당하는 결과를 볼 수 있음
- 페이지 번호를 지정하지 않아도 PageVO에 1로 지정되기 때문에 'boards/list' 와 'boards/list?page=1'을 호출한 결과는 동일하게 첫 페이지의 내용이 출력됨
- 화면에서 ${result}로 출력되는 부분은 페이지 번호에 주의해야 함, list를 호출하면 내부적으로 Pageable은 0번 페이지를 의미하지만, 결과 화면에서는 1로 출력됨
- 이렇게 출력되는 이유는 실제 객체인 PageImpl의 코드의 toString() 부분 떄문임
- Pageable 인터페이스의 구현체인 PageableImpl 클래스의 toString() 이용 시, 실제 페이지 번호에 1을 더해 출력하기 때문에 0이 아닌 1부터 출력됨
[log]
Hibernate: select webboard0_.bno as bno1_0_, webboard0_.content as content2_0_, webboard0_.regdate as regdate3_0_, webboard0_.title as title4_0_, webboard0_.updatedate as updateda5_0_, webboard0_.writer as writer6_0_ from tbl_webboards webboard0_ where webboard0_.bno>? order by webboard0_.bno desc limit ?
Hibernate: select count(webboard0_.bno) as col_0_0_ from tbl_webboards webboard0_ where webboard0_.bno>?
2020-09-14 23:27:50.160  INFO 11232 --- [io-8080-exec-10] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------
2020-09-14 23:27:50.160  INFO 11232 --- [io-8080-exec-10] o.zerock.controller.WebBoardController   : page : Page request [number: 0, size 10, sort: bno: DESC]
2020-09-14 23:27:50.160  INFO 11232 --- [io-8080-exec-10] o.zerock.controller.WebBoardController   : result : Page 1 of 30 containing org.zerock.domain.WebBoard instances
2020-09-14 23:27:50.160  INFO 11232 --- [io-8080-exec-10] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------

* 화면의 출력과 페이징 처리
- 실제 화면에 내용을 출력하는 부분은 부트스트랩의 화면 컴포넌트 중 List 이용, 페이징처리는 Pagination을 이용
- 리스트 내용은 ${result.content}이므로 'th:each'를 이용해 출력

* 페이지 번호 출력
- 페이징 처리에는 Page<WebBoard>의 getPageable()을 이용해 Pageable 타입의 객체를 활용
- Pageable 객체는 이전 페이지를 보여주는 prevOrFirst(), 다음 페이지를 보여주는 next() 와 같은 구조로 이루어짐
- 주어지는 Pageable 객체를 이용해서 화면에 간단하게 이전, 다음 페이지만을 보여주는 것이라면 문제가 없지만
- 일반적인 웹 페이지처럼 페이지의 번호를 보여주려면 시작 페이지까지 몇 번 prevOrFirst()를 해야하고, next()를 해야하는지 계산해야함 (페이지 번호를 출력하려면 vo 패키지에 PageMaker 라는 별도 클래스를 이용해, 정보들을 처리하도록 작성)
- PageMaker는 화면에 출력할 결과 Page<T>를 생성자로 전달받고, 내부적으로 페이지계산을 처리
- PageMaker가 처리하는 데이터
1) prevPage : 페이지 목록의 맨 앞인 '이전' 으로 이동하는데 필요한 정보를 가진 Pageable
2) nextPage : 페이지 목록의 맨 뒤인 '다음' 으로 이동하는데 필요한 정보를 가진 Pageable
3) currentPage : 현재 페이지의 정보를 가진 Pageable
4) pageList : 페이지 번호의 시작부터 끝까지의 Pageable 들을 저장한 리스트
5) currentPageNum : 화면에 보이는 1부터 시작하는 페이지 번호

- 컨트롤러는 이를 이용하도록 list() 메소드를 수정
- list() 메소드의 수정된 부분은 Model에 직접 Page<T>를 담는 대신 PageMaekr 객체를 담음, list.html은 전달받은 데이터가 PageMaker 객체이므로 수정필요
- 목록을 출력하는 <div>에 th:with를 이용해서 result라는 변수가 PageMaker 객체안의 result임을 명시, 이후 처리는 기존 코드를 그대로 이용할 수 있음
- 브라우저를 통해 작성한 코드를 확인해 보면 기존과 동일하게 페이지 처리가 되는 것을 확인할 수 있음
[log]
2020-09-17 22:45:11.510  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageVO                     : =======================================
2020-09-17 22:45:11.510  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageVO                     : makePageable................
2020-09-17 22:45:11.511  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageVO                     : dirction : 0
2020-09-17 22:45:11.511  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageVO                     : props : [Ljava.lang.String;@369b55b4
2020-09-17 22:45:11.511  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageVO                     : page : 1
2020-09-17 22:45:11.511  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageVO                     : size : 10
2020-09-17 22:45:11.511  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageVO                     : =======================================
2020-09-17 22:45:11.975  INFO 24504 --- [nio-8080-exec-1] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
Hibernate: select webboard0_.bno as bno1_0_, webboard0_.content as content2_0_, webboard0_.regdate as regdate3_0_, webboard0_.title as title4_0_, webboard0_.updatedate as updateda5_0_, webboard0_.writer as writer6_0_ from tbl_webboards webboard0_ where webboard0_.bno>? order by webboard0_.bno desc limit ?
Hibernate: select count(webboard0_.bno) as col_0_0_ from tbl_webboards webboard0_ where webboard0_.bno>?
2020-09-17 22:45:12.201  INFO 24504 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------
2020-09-17 22:45:12.201  INFO 24504 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : page : Page request [number: 0, size 10, sort: bno: DESC]
2020-09-17 22:45:12.202  INFO 24504 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : result : Page 1 of 30 containing org.zerock.domain.WebBoard instances
2020-09-17 22:45:12.202  INFO 24504 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : TOTAL PAGE NUMBER : 30
2020-09-17 22:45:12.202  INFO 24504 --- [nio-8080-exec-1] o.zerock.controller.WebBoardController   : ------------------------------------------------------------------
2020-09-17 22:45:12.204  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageMaker                  : ==================================
2020-09-17 22:45:12.204  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageMaker                  : tempEndNum : 10
2020-09-17 22:45:12.204  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageMaker                  : total : 30
2020-09-17 22:45:12.204  INFO 24504 --- [nio-8080-exec-1] org.zerock.vo.PageMaker                  : ==================================

- 페이지 번호를 출력하는 부분도 list.html에서 작성
- 브라우저에서는 페이지의 시작 번호에서 끝 번호의 수 만큼 'Page'라는 글자가 출력됨
- 만일 페이지의 번호가 모자라는 경우에는 끝 페이지의 번호까지만 출력 (300개 데이터를 20개씩 출력하는 경우 마지막 페이지는 15페이지가 되므로 11페이지를 호출하는 경우 11페이지 부터 15페이지까지 5개만 출력됨)
- 'Page' 라는 글자들이 올바르게 출력되었다면 이제 페이지 번호를 숫자로 출력하도록 수정
- Pageable 객체의 pageNumber는 1이 작데 되어 있으므로 화면에는 1을 더해 출력
- '이전'과 '다음' 페이지 처리는 th:if 를 이용해 검사하고, result.prevPage와 result.nextPage를 이용해 처리
- '이전' 과 '다음'이 필요한 경우 Pageable 객체의 정보가 나오는 것을 확인할 수 있음
- 남은 작업은 'Page'라는 글자 대신 페이지 번호를 출력해 주는 것, '이전'과 '다음'에도 페이지 번호가 출력되도록 함
- 이제 화면에는 '이전' , '다음' 페이지로 이동할 수 있는 링크가 ㅊㄹ력되는 자리에 'PREV'와 'NEXT' 가 출력됨

* 현재 페이지 번호 구분하기
- 지금까지의 처리 작업으로 화면에 페이지 번호들은 제대로 출력되지만, 현재 페이지가 몇번 페이지인지 구분하기 어려움
- 현재 페이지의 번호는 CSS 클래스를 이용해서 진하게 보여주도록함
- 현재 페이지 번호를 구분하기 위해 Thymeleaf의 th:classappend를 적용해 특별한 경우에만 특정 CSS 클래스를 추가하도록 할 수 있음
- th:classappend와 삼항연산자를 이용해서 간단하게 'page-item active' 라는 클래스를 지정하면 화면에서 해당 페이지 숫자가 진하게 보이는 것을 확인할 수 있음

* 페이지 이동 처리
- 페이지 이동이 제대로 동작하기 위해 우선 태그의 링크 내용에서도 페이지 정보가 제대로 보이도록 <a> 태그의 href 속성값을 페이지 번호로 지정 (<a th:href="${p.pageNumber} + 1">)
- 정상적인 화면 이동이 되려면 링크를 처리하는 JavaScript를 작성해야함

* 페이지 이동을 위한 JavaScript 처리
- 페이지 이동을 위한 JavaScript는 layout1.html에 적용된 jQuery를 이용해서 처리
- 내부적으로는 <form> 태그를 생성하고, 이를 이용해서 submit을 하는 방식으로 처리함, 이를 위해 list.html에 <form> 태그를 추가
- 사용자가 페이지 번호를 클릭할 때 <a> 태그의 기본 동작인 '이동'을 막는 대신 <form> 태그 내의 name='page'인 태그 값을 변경한 뒤 submit 하도록 작성
- 작성 후 게시물의 내용을 <table>로 정리해줌

6.2.3. 검색 조건 처리
- 사용자가 지정하는 검색 조건과 키워드를 입력했을 때 처리가 가능하도록 컨트롤러와 VO, list.html 페이지를 수정
- 이미 Querydsl을 이용해서 처리할 수 있는 기능은 구현, 테스트를 진행했기 때문에 웹 관련 처리만 하면됨
- 우선 VO가 기존 page와 size만을 파라미터로 전달받았던 것을 'keyword(검색키워드)', 'type(검색 타입)'을 수집할 수 있도록 수정
- 기존 pageVO에 keyword와 type이 인스턴스 변수로 추가되었고, getter/setter를 처리
- 컨트롤러에서는 list()의 Predicate를 생성하는 부분을 전달받은 PageVO를 이용하도록 수정
- PageVO를 @ModelAttribute("pageVO")로 지정해 둔 것과, vo.getType(), vo.getKeyword()를 이용해서 Predicate를 처리하도록 변경
- 브라우저에서는 'type'과 'keyword'를 이용해 검색이 정상적으로 이루어진 결과를 반환하는지 확인 (예를 들어, 게시물의 제목에 '10'이라는 문자열이 들어간 게시물을 검색한다고 가정한다면, 첫 페이지는 'type=t&keyword=10'이라는 링크를 생성)
- Page 파라미터를 추가해 주면 정상적으로 원하는 페이지 검색이 진행되는 것을 볼 수 있음

* list.html에서의 검색 처리
- URL을 조작해서 검색이 가능한 것을 확인했다면, html에서 검색 조건을 선택하도록 하는 것과 그에 대한 이벤트 처리임
- 검색 조건을 선택하는 작업 처리를 위해 list.html에 검색 조건을 선택할 수 있는 HTML 코드를 추가
- 검색 조건이 있는 경우에는 정상적으로 선택 항목이 체크되고, 키워드가 들어갈 수 있도록 처리 (검색 조건과 키워드는 PageVO에 같이 전달됨)
- 화면에 보이는 부분 외에도 검색 조건은 모든 페이지 이동 시 같이 전달되어야 하므로 기존에 작성된 <form> 태그에도 처리될 필요가 있음 (hidden값)
- 화면의 이동은 <form> 태그를 이용해 처리되므로, 검색 후 페이지 번호를 클릭하면 검색 조건이 같이 유지되면서 이동하는 것을 확인할 수 있음

* 검색 버튼 클릭
- 앞서 실행한 화면에서 사용자가 검색 조건을 선택하고, 'Search' 버튼을 클릭하면, 검색을 새로 한다는 의미 => 페이지는 1로 변경되어야 하고, 검색 조건과 키워드 역시 다시 세팅되어야 함 (JavaScript로 처리)
- 화면에서 새로운 검색 조건을 추가한 상태에서 'Search' 버튼을 클릭하면, 새롭게 검색이 진행되는 것을 확인할 수 있음

6.3. 새로운 게시물 등록
- 새로운 게시물을 등록하는 작업은 리스트를 처리하는 작업에 비해 수월, 다만 게시물의 등록 작업은 기존 작성된 엔티티 클래스를 그대로 이용할 것인지, 별도의 Value Object용 클래스를 작성해 처리할 것인지 대한 고민 필요
- 빠르게 개발을 진행해야 한다면 기존 엔티티 클래스를 이용하는 것도 나쁘지 않은  선택 (예제 에서는 엔티티 클래스 사용)

6.3.1. 게시물의 입력과 처리
- 게시물을 작성하는 작업은 'GET' 방식을 이용해서 입력하는 화면을 보고, 'POST' 방식을 이용해서 새로운 게시물을 등록하도록 처리
- GET 방식으로 들어오면 단순히 게시물을 작성할 수 있는 화면만을 보여주면 되므로, 굳이 WebBoard를 파라미터로 사용하지 않아도 됨 (개인적으로는 나중에 입력 값등 문제가 생기는 것을 대비하기 위해 파라미터 지정)
- POST 방식의 경우에는 새로운 게시물을 등록하고, '/boards/list'로 리다이렉트를 시켜줌 (리다이렉트를 하지 않으면 여러 번 게시물을 등록할 수 있기 때문에 이를 방지하기 위함_흔히 Post-Redirect-Get방식)
- RedirectAttributes는 URL로는 보이지 않는 문자열을 생성해 주기 때문에 브라우저의 주소창에는 보이지 않음
- 입력 화면은 borads 폴더 내 registe.html 파일 작성
- 게시물을 등록하게 되면 리스트 페이지로 이동하기 때문에 새로운 게시물이 가장 상단에 뜨는 것을 볼 수 있음
- 리스트 페이지의 특이한 점은 RedirectAttributes의 addFlashAttributes()를 이용한 경우, URL상에는 전달되는 'msg'라는 데이터가 보이지 않음
- URL상에는 없지만 실질적으로 데이터가 전달되기 때문에 이를 이용해 사용자에게 게시물이 정상적으로 등록되었다는 것을 알려주어야 함 (등록 알림 처리를 위해 list.html에 스크립트 작성 필요)
- $(window).load()를 이용한 이유는 화면의 모든 구성이 온전해진 후 경고창을 띄우기 때문, 이후 전달된 'msg' 를 이용해 '정상 등록' 메세지를 띄움

* 게시물 입력 링크 처리
- list.html 화면에는 사용자가 새로운 게시물을 작성할 수 있는 링크를 제공해 주어야 하므로, 간단한 화면 이동 경로를 추가
- 리스트 페이지 위쪽에 '/boards/register'로 이동하는 링크가 생성된 것을 볼 수 있음

6.4. 게시물의 조회
- 게시물의 리스트 화면에서는 게시물의 상세 내용을 볼 수 있도록 처리되어야 함, 게시물을 조회하는 경우에는 반드시 다음의 경우를 고려해야함
1) 검색조건이 없는 경우의 조회 : 페이지 번호를 유지한 상태에서 조회로 이동
2) 검색조건이 있는 경우의 조회 : 페이지 번호 + 기타 검색 조건을 모두 유지한 상태에서 이동
- 게시물을 조회할 때는 다시 사용자가 원래 리스트 화면으로 이동할 수 있는 링크를 제공해야 함, 이를 처리하는 가장 간단한 방법은 기존 페이지 이동 시 사용했던 <form>태그를 이용함
- 우선 게시물의 리스트에서 이동이 가능하도록 링크를 추가
- <a> 태그에 별도의 'boardLink'라는 클래스를 지정한 이유는 jQuery를 이용하는 처리를 간단히 하기 위한 방법, 실제 이동을 위한 JavaScript 이용해서 처리
- JQuery에서는 <a> 태그의 기본 동작을 막고 <form>태그의 action을 게시물 조회가 가능한 링크로 변경
- 게시물 조회에는 게시물의 번호가 필수적이기 때문에 별도의 hidden태그를 생성해 <form> 태그를 추가한 후 전송(submit) 하게 됨
- 브라우저상에서 게시물 번호를 클릭하면 모든 정보가 '/boards/view'로 전송되는 것을 확인할 수 있음, 검색을 한 후에도 동일하게 유지되는 것을 볼 수 있음
- '제목'으로 '게시물'이라는 키워드를 이용해 검색 후 제목을 클릭하면 모든 정보가 전송되는 것을 볼 수 있음

6.4.1. 컨트롤러의 처리
- 컨트롤러에서 게시물의 조회는 '/boards/view' 가 됨, 경로로 전달되는 데이터는 '게시물 번호 + 검색 조건 + 페이징 조건'
- 위의 세 가지 중 '검색 조건'과 '페이징 조건'은 이미 생성해 둔 PageVO로 처리가 가능하기 때문에, 게시물의 번호만 추가로 처리하도록 파라미터를 설정
- 결과 화면을 위해 boards 폴더 내 view.html 작성, register.html과 유사하지만, 게시물의 번호와 시간등 처리 추가
- 게시물의 목록에서 특정 게시물을 클릭하면 브라우저에서는 편집이 불가능한 형태로 보이게 됨

6.4.2. 조회 페이지에서의 링크 처리
- 최근의 웹에서는 주로 조회 페이지와 수정, 삭제 페이지는 분리하는 것이 일반적임
- 조회 페이지는 내용을 보는 용도로만 활용하고, 수정이나 삭제는 별도 페이지에서 이루어짐, 조회 페이지의 하단에는 링크가 필요 (수정/삭제 페이지로 이동할 수 있는 링크, 리스트로 이동할 수 있는 리스트)
- 조회 페이지는 반드시 현재의 '검색 조건 + 페이징 조건'을 이용해 다시 목록 페이지로 이동할 수 있도록 링크 작성
- Thymeleaf의 링크 처리에는 '(키=값)'의 형태로 파라미터를 연결해서 링크를 생성할 수 있음
=> th:href="@{list(page=${pageVO.page},size=${pageVO.size},type=${pageVO.type},keyword=${pageVO.keyword},bno=${vo.bno})}
- 이 코드는 'list?page=1&size=10&type=&keyword=&bno=303' 로 처리
- 검색을 통해 조회 페이지에 들어오는 경우에는 자동으로 검색 키워드 등이 URL에 맞게 인코딩됨 ('list?page=1&size=10&type=w&keyword=05&bno=276')

6.5. 게시물의 삭제와 수정
- 게시물 처리의 마지막 단계는 수정과 삭제에 대한 처리, 순서는 '게시물 수정/삭제 페이지 처리=> 게시물 삭제 및 이동 => 게시물 수정 및 이동' 이 순서로 처리

6.5.1. 게시물 수정/삭제를 위한 페이지
- 게시물의 조회 페이지에서 수정/삭제는 별도 페이지로 이동해서 처리되므로, 해당 URL에 맞는 컨트롤러의 메소드를 작성하는 것으로 시작, 완성된 경로는 '/boards/modify'이므로 modify.html 작성
- modify.html은 기본적으로 조회할 때 사용했던 view.html과 유사, 다른 점은 게시물의 일부 정보를 수정할 수 있다는 점과 <form> 태그를 이용해서 처리된다는 점
- modify.html에서 게시물의 내용을 출력하는 부분은 <form> 태그를 이용해서 감싸주고, 수정이 필요한 부분(게시물의 제목과 내용)만 포함하도록 작성
- <form> 태그의 내부에는 페이징 조건과 검색 조건으르 같이 전달할 수 있도록 hidden 태그들로 작성하는데, 이는 수정 등의 작업 후에 다시 원래 사용자가 보던 리스트 페이지로 이동하기 위해 작성
- modify.html의 버튼은 '수정', '삭제', '취소 후 목록' 으로 구분, '수정', '삭제' 버튼은 <form> 태그를 이용해서 처리해야 하므로 별도 JavaScript를 이용해 처리하고, '취소 후 목록' 버튼은 링크를 생성해서 처리할 수 있음

6.5.2. 삭제 처리
- 게시물을 수정하는 화면은 GET방식으로 처리되지만, 실제 수정과 삭제 작업은 POST 방식으로 처리된다는 점이 다르기 때문에 별도 처리. 컨트롤러에 POST방식으로 삭제가 처리되도록 메소드 작성
- 게시물이 삭제된 후에는 다시 리스트 화면으로 가도록 하고 결과만 보여줌, 원한다면 사용자의 기존 페이징 정보와 검색 정보를 활용할 수 있도록 PageVO의 정보를 파라미터로 지정해둠
- 기존 검색과 페이징 처리를 활용하는 경우 addAttribute()를 이용하게 됨, addAttribute()는 addFlashAttribute()와 달리 URL에 추가되어서 전송됨
- modify.html에서는 JavaScript를 이용해 작성한 컨트롤러를 호출할 수 있도록 해야함
- '삭제' 버튼은 class 속성으로 '.delbtn'이 지정되어 있으므로, 이를 이용해 이벤트 처리, POST 방식으로 처리하기 때문에 <form> 태그를 이용해 POST 방식, action을 지정

6.5.3. 수정 처리
- 수정 처리는 삭제 처리와 유사, 차이점은 삭제 경우 단순히 게시물의 번호만을 이용했지만, 수정의 경우 기존 게시물에 일부분만을 변경해서 수정하고, 저장한다는 점에 차이가 있음. 컨트롤러에 POST 방식으로 호출되는 메소드 작성
- 수정 화면에서는 게시물의 제목과 내용만을 수정하게 되므로, 기존 게시물의 데이터를 가져온 이후 변경되는 제목과 내용 속성을 갱신, 이후 다시 save()를 통해 데이터베이스에 저장하게 됨
- 조회 페이지로 이동한 후 간단히 결과를 알려주기 위해 addFlashAttribute()를 이용해 'msg'를 추가
- modify.html 의 JavaScript 부분은 삭제 처리와 유사하게 <form> 태그를 이용해서 동작하도록 처리
- 수정 작업의 흐름은 '게시물 조회 -> 수정 화면 진입 -> 수정 작업 처리 -> 조회 화면' 순으로 동작하게 됨
- 수정된 후에는 'msg'라는 숨겨진 파라미터가 전송되기 때문에 필요하다면 경고창 등을 이용해 게시물이 수정되었다는 정보를 보여주도록 처리할 수도 있음


