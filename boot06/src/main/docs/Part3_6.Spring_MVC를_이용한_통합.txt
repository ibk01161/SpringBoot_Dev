#6. Spring MVC를 이용한 통합

6.1. 프로젝트의 기본 구조 생성하기
- Spring Starter Project 메뉴를 이용해서 프로젝트 생성, 기존 라이브러리 추가, Thymeleaf 레이아웃 라이브러리 추가
- application.properties 파일은 기존 사용했던 설정들 사용

6.1.1. 레이아웃 분리해 두기
- 프로젝트에서 사용할 페이지를 레이아웃 기능을 이용할 수 있도록 분리
- templates 폴더에 layout 폴더 생성, static 폴더의 내용 추가

* 부트스트랩 추가해 두기
- HTML5 Boilderplate는 프로젝트의 기본 구조를 생성할 때는 유용하지만, 각 화면을 구성하는 데에는 CSS가 필요하므로, 부트스트랩 이용
- 부트스트랩의 CSS와 JavaScript 관련 링크를 layout1.html에 추가
- layout1.html은 여러 페이지에서 사용하는 레이아웃을 의미하므로, 부트스트랩의 panel 이라는 것을 이용해 전체 화면 구성에 사용
- 상단에는 간단한 문자들을 보여주고, 레이아웃의 내용물은 부트스트랩의 panel이라는 것으로 처리하도록 변경

6.1.2. 컨트롤러 생성 및 화면 확인하기
- 프로젝트의 기본 구조가 완성되었다면, 생성된 프로젝트의 모습을 확인할 수 있는 기본 컨트롤러를 작성해 실제 화면 테스트 (컨트롤러 작성)
- 컨트롤러 선언부에는 @Controller, @RequestMapping을 지정, 개발 시 로그를 출력하는 기능인 Lombok의 @Log 어노테이션도 추가
- 먼저 게시물의 리스트 기능 부터 작성
- 우선 해당 URI에 맞는 html 페이지를 templates 폴더 아래 작성, 경로에 해당하는 'boards'라는 폴더 생성 후 그 안에 list.html 파일 생성
- list.html은 부트스트랩의 간단한 스타일을 이용해서 Panel을 구성, 'panel-heading' 등 이용해서 화면에 간단한 스타일을 줌
- 'localhost:8080/boards/list'를 통해 레이아웃이 정상적으로 적용되는지 확인

6.1.3. 엔티티 클래스와 Repository 설계
- 프로젝트는 작게 하나의 테이블을 이용하는 단일 엔티티 클래스를 구성하는 것으로 시작 하는 것이 좋음
- domain 패키지 생성 후 엔티티 클래스 설계, Repository는 persistence 패키지에 Repository 클래스 추가

6.1.4. Querydsl 설정
- 게시물의 검색에는 동적 쿼리를 이용해 처리할 것이므로 pom.xml에 Querydsl 관련 라이브러리와 코드생성 플러그인 추가
- QueryDsl과 관련된 설정이 끝나면 프로젝트 내에 'target/generated-resource/java'가 생성된 것을 확인하고, Qdomain인 QWebBoard.java가 생성된 것을 볼 수 있음

* Maven으로 빌드하는 경우
- Maven을 이용하는 경우 명령어를 이용해야함
- Run As에서 Maven Build => new => 빌드 이름 : Code Gen, Base Directory : 'Workspace를 이용' ${worksspace_loc:/boot06}, Goals : eclipse:eclipse 설정 후 apply
=> Console 타이틀은 'Code Gen' 으로 지정되고, 프로젝트가 빌드되는 것을 확인할 수 있음

- 검색 기능을 구현할 때 사용할 수 있도록 WebBoardRepository에 QueryDsl 관련 인터페이스 추가

6.1.5. 테스트 코드 작성
- 작성한 Repository는 가능하면 테스트를 이용, test 폴더에 test클래스 생성 후 테스트 관련 어노테이션, @Log, @Commit 등을 미리 추가하고 Repository 인터페이스 주입

* 더미 테스트 추가
- insertDummies()는 1부터 300까지 bno값을 가지는 데이터 생성 후 데이터베이스에 정상적으로 insert 됐는지 확인
- 항상 본격적인 개발 전 테스트용 더미 데이터를 넣어주는 과정을 개발 단계에 포함해 주는 것이 좋음


















