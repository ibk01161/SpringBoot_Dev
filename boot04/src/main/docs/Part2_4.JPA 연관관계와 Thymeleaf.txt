#4. 다양한 연관관계 처리

* 연관관계 처리의 순서와 사전 설계
- 객체와 객체와의 관계를 처리하는 연관관계의 가장 흔한 예는 '게시물과 댓글'의 관계임
- 처리 순서
1) 필요한 각각의 클래스 정의
2) 각 클래스의 연관관계에 대한 설정 추가
 - '일대다', '다대다' 등의 연관관계 설정
 - 단방향, 양방향 설정
3) 데이터베이스상에 원하는 형태의 테이블이 만들어지는지 확인
4) 테스트 코드를 통해 정상작동하는지 확인
- JPA는 결과적으로 데이터베이스상에 테이블을 생성하기 때문에, 클래스상에 표현된 연관관계는 결국 데이터베이스 테이블간의 구조가 됨
- JPA를 이용하더라도 반드시 목적에 맞는 데이터베이스의 설계 능력이 있어야 함

* 관계형 데이터베이스의 설계와 JPA
- 일반적인 관계형 데이터베이스에서 설계 순서
1) 가장 중심이 되는 사람이나 명사를 결정하고, 이에 대한 구조를 대략적으로 설계
2) 1) 에서 생성된 데이터들이 상호작용을 하면서 만들어내는 새로운 데이터를 정의
3) 1), 2)를 다시 세분화해서 설계

* 중심이 되는 데이터 결정
- '쇼핑몰'을 예제로 들자면 여기서 가장 중요한 데이터는 '매출'인데 반드시 '회원'과 '상품' 데이터가 존재해야만 가능함
- 최종적으로 원하는 데이터는 '매출'이었지만 이를 위해 '회원'과 '상품'이라는 데이터는 반드시 필요
- 가장 중심이 되는 명사나 사람은 아무 사전 조건 없는 순수한 데이터가 됨
- 특징
1) 순수한 장부의 형태로 존재
2) 중심이 되는 데이터는 독립적인 라이프사이클을 유지
3) 고객의 요구사항에서 항상 모든 행위의 주어나 목적어가 됨
- 더미(dummy) 데이터를 설계해 주는 것이 좋음 (아무 의미를 가지지 않은 가짜 데이터), 가짜 데이터를 활용해 설계의 적합성이나 타당성을 검토하게 됨

* 중심 데이터 간의 상호 작용
- 중심이 되는 데이터들 사이에서 파생되는 데이터는 '동사'의 영역, '동사'에는 주로 중심이 되는 데이터들의 동작과 히스토리가 기록됨 (ex : '회원이 상품을 구매했다' or '회원의 상품 구매 히스토리' 와 같이 처리됨), 히스토리를 기록하기 위해 테이블 추가 가능
- '구매' 테이블은 '회원', '상품' 데이터가 존재하는 상태에서만 존재가 가능 (ex : user00회원이 p1, p2 상품을 구매하였다는 히스토리 기록)

* 연관관계의 설정
- 연관관계를 설정하는 방법은 어떤 데이터가 얼마나 중복해서 나타나는가를 세는 것만으로 모든 관계를 파악할 수 있음

* 전통적인 관계형 데이터베이스에서의 연관관계의 구분
- 일대일 (1 : 1)
- 일대다 (1 : M)
- 다대다 (M : N)
=> 데이터베이스의 설계 그림을 ERD, 전통적인 개발 방식에서는 먼저 ERD를 그려 데이터베이스의 설계를 작성하고, 테이블 생성 후 개발에 들어감

* JPA에서의 연관관계 구분
- 일대일 (@OneToOne)
- 일대다 (@OneToMany)
- 다대일 (@ManyToOne)
- 다대다 (@ManyToMany)
- 이와 더불어 JPA를 이용하는 경우에는 반드시 '방향'에 대한 설정이 필요
- 단방향(Unidirectional) 참조 : 한쪽 클래스만 다른 클래스의 인스턴스를 참조하도록 설정
- 양방향(Bidirectional) 참조 : 양쪽 클래스 모두 다른 클래스의 인스턴스를 참조
- 관계형 데이터베이스와 비교해보면 '일대다' 관계가 '일대다', '다대일'의 관꼐로 세분화 돼있는데 이것은 객체지향이라는 것이 상대적인 입장에서 관계를 파악할 수 있기 때문

* 예제의 개요
1) 회원과 프로필 사진들의 관계 (일대다, 다대일, 단방향)
2) 자료실과 첨부파일의 관계 (일대다, 다대일, 단방향)
3) 게시물과 댓글의 관계 (일대다, 다대일, 양방향)
=> 일대다, 다대일 관계가 가장 많이 사용하는 관계
1번 관계에서는 단방향의 참조를 '회원' <- '프로필'
2번 관계에서는 단방향의 참조를 '자료실' -> '첨부파일'
3번 관계에서는 양방향의 참조를 '게시물' <-> '댓글'
- 데이터베이스상에서는 동일한 관계지만 JPA를 이용하는 경우에는 각 상황에 따라 다른 방식의 접근이 필요, 각 방식의 장,단점 파악 필요

1. 회원과 프로필 사진의 관계 - 단방향 처리 1
- 데이터베이스상의 설꼐로 보면 회원과 프로필은 전형적인 '일대일' or '일대다'의 관계 (예제에서는 회원이 과거 프로필을 보관한다고 가정 => 일대다 관계)
- 한명의 회원이 여러 프로필을 가지고 있음, 그 중 하나의 사진을 현재 자신 프로필로 이용하는 경우에는 current 컬럼의 값이 true로 지정

1_1. 예제 프로젝트 작성
* Spring Data JPA를 이용할 때 개발 순서
1) 각 엔티티 클래스 설계
2) 각 엔티티 간의 연관관계 파악 및 설정
3) 단방향, 양방향 결정

* Spring boot 2.0 특징
- JDK1.8에서만 동작
- JPA의 구현체인 Hibernate의 버전이 5.2 버전, 최신 API 기능 활용, 식별키 생성 방식에 따라 5.0과 조금 다른 형태로 동작
- 스프링 프레임워크 버전 5.0
- Spring Data JPA의 버전 역시 변경되므로 API 사용방법이 조금 달라짐

* application.properties
- MySQL의 경우 데이터베이스의 엔진을 MyISAM과 InnoDB로 구분
- MyISAM은 예전부터 사용되던 엔진으로 속도면에서는 좀 더 나을 수 있지만, 데이터 무결성을 제대로 체크하지 않기 떄문에 최근에는 InnoDB를 권장
- spring.jpa.database-platform을 지정하지 않으면 기본적으로 MyISAM으로 지정되기 때문에, 이를 사용하기 위해 MySQL5InnoDBDialect를 명시적 지정, InnoDB가 아닌경우 외래키 대신 인덱스가 생성되므로 주의

1_2. 각각의 엔티티 클래스 설계
- 연관관계를 처리해야 한다고 해도 모든 연관관계를 맺을 엔티티 클래스가 존재해야 함, domain패키지에 'Member'와 'Profile'이라는 클래스 생성
- 생성한 Member와 Profile 클래스의 인스턴스 변수를 설계하는 과정에서는 순수하게 해당 엔티티가 가지는 속성만을 설계하고, 연관되어 있는 데이터들은 고려X
- 여기서 Member와 Profile에는 추가적인 속성들이 존재할 수 있음 (대표적으로 '최초 생성 시간'과 '최종 수정 시간'을 기록해주는 컬럼)
* GenerationType.AUTO와 GenerationType.INDENTITY
- 엔티티의 식별키를 처리하는 여러 방식 중 AUTO는 데이터베이스에 맞게 자동으로 식별키를 처리하는 방식으로 동작
- MySQL의 경우 스프링부트1.5.4버전일때는 컬럼이 auto_increament로 지정 되었지만 2버전부터는 hibernate_sequence라는 테이블을 생성하고 번호를 유지하는 방식으로 변경됨
- hibernate_sequence테이블은 자동으로 생성되는 모든 엔티티들이 공유하는 테이블이됨 (1,10,11 과 같이 비연속적인 데이터들이 생성될 수 있음)
- hibernate_sequence테이블이 존재하면 이 후 GenerationType.INDENTITY로 변경하더라도 auto_increament로 처리되지 않기 떄문에 테이블을 삭제한 후 다시 생성해야 함
- MySQL에서 GenerationType.INDENTITY를 이용하는 경우 반드시 hibernate_sequence 테이블이 존재하는지 확인 후 실제 테이블 생성 시 auto_increament가 처리되는지 확인

1_3. 연관관계의 설정과 단방향/양방향
- 회원과 프로필 관계는 '일대다', 프로필과 회원의 경우 '다대일' 관계라는것을 파악할 수 있음
- 관계형 데이터베이스에서는 단순히 하나의 FK를 이용해서 지정되는 상황이 JPA를 이용하는 복잡해진 상황
* 판단해야 할 것
1) '회원'에서 '프로필'로의 접근만 사용? - Member클래스에만 Profile타입의 인스턴스 변수 추가?
2) '프로필'을 통해 '회원' 정보를 조회할 필요? - Profile클래스에도 Member타입의 인스턴스 변수 추가?
=> 이러한 설정을 '단방향 / 양방향' 관계로 구분해줌
- '단방향'이란 일방 통행의 참조, 예를 들어 회원 정보를 통해서만 프로필 정보를 볼 수 있는 구조
- '양방향'은 프로필을 먼저 알아내고, 이를 통해 회원 정보를 알아내는 경우
- 회원과 프로필 관계를 보면 프로필 테이블에 회원 정보가 입력되어야 하므로, 가장 쉬운 구조는 'Profile' 클래스에 'Member' 클래스 타입을 인스턴스 변수로 설계
- Profile 클래스는 Member 타입의 member라는 인스턴스 변수를 추가 (회원 <=  프로필)
- Lombok의 @ToString에 exclude 속성을 이용해 Member에 관련된 toString()을 호출하지 않게 설정 
  (양방향으로 참조 설정했을 때 문제가 생길 수 있음, 양방향으로 참조하는 경우 Member의 toString()을 호출할 떄 Profile의 toString()을 호출하고, Proflie에서는 다시 Member의 toString()을 호출하기 때문에 무한히 반복될 수 있음)

* JPA의 연관관계 어노테이션 처리
-JPA에서의 연관관계를 크게 @OneToOne, @OneToMany, @ManyToOne, @ManyToMany의 어노테이션을 이용해서 처리 => 테이블 예상 구조를 생각하면서 결정
- Member와 Profile의 관계는 '일대다' 이지만, Profile과 Member의 관계는 '다대일'이므로 Profile 쪽에서 @ManyToOne 어노테이션 추가

* 생성된 테이블 구조 확인
- JPA의 연관관계 설정은 JPA를 이용할 떄 가장 중요하므로, 가능하면 연관관계를 맺은 후 프로젝트를 실행해서 올바른 구조로 생성되는지 확인해 주는 것이 좋음
- Aplication.java를 실행하면 다음과 같이 테이블의 구조와 제약 조건이 생성되는 것을 확인할 수 있음
Hibernate: create table tbl_members (uid varchar(255) not null, uname varchar(255), upw varchar(255), primary key (uid)) engine=InnoDB
Hibernate: create table tbl_profile (fno bigint not null auto_increment, currnet bit not null, fname varchar(255), member_uid varchar(255), primary key (fno)) engine=InnoDB
Hibernate: alter table tbl_profile add constraint FKhvsb89t46nv1one9hbodhrswo foreign key (member_uid) references tbl_members (uid)
=> 생성된 SQL을 보면 tbl_profile 테이블에 member_uid 라는 컬럼이 추가 되었고, alter table을 통해 FK가 생성되고, tbl_members의 uid 컬럼을 참조함

1_4. Repository 작성
- 연관관계의 설정에서 'Repository를 몇 개나 생성해야 하는지?' 잘 생각해야함
- 엔티티 클래스마다 Repository를 설계해 줄 수 있지만, 연관관계의 설정에 따라서 Repository를 설계할 필요가 없을 수도 있음
- Member와 Profile은 Member를 처리하는 Repository를 생성해서 회원 데이터를 처리하는 것이 명확
- 반면에 Profile을 저장할 때는 Member 객체를 통해 Profile을 처리할 수 없기 때문에 Profile을 처리하는 Repository를 설계하는것이 보편적

1_5. 테스트를 통한 검증
- 데이터베이스의 테이블 구조를 설계할 때 많은 수정 과정을 거치듯이 JPA를 이용해서 연관관계를 설정할 때도 이러한 과정이 필요
- 테스트 폴더에 Test.java 작성 (MemberRepository, ProfileRepository 주입)
- @Log는 Lombok의 로그를 사용할 때 이용하는 어노테이션, @Commit은 테스트 결과를 데이터베이스에 commit 하는 용도로 사용

* 더미 회원 데이터 추가
- 우선 프로필 데이터를 추가하기 전에 회원 데이터가 존재해야 하므로, testInsertMembers() 메소드를 작성해 데이터 추가
- testInsertMembers()는 100명의 회원 데이터를 생성, IntStream.range(1,101)을 이용하면 1부터 100까지 숫자를 생성, Java8버전에서는 forEach()와 연결해 for 루프와 같이 사용

* 특정 회원의 프로필 데이터 처리
- Profile 데이터는 반드시 Member 객체에 대한 참조가 필요
- 이 작업을 하는 방식은 MemberRepository를 이용해 실제 Member 객체를 가져와서 처리할 수 있지만, Member를 읽고 난 후 Profile을 읽어야 하기 때문에 좋은 방법X
- Member의 식별자인 uid 속성을 가져오기 위해 Member 객체만 잠시 생성하는 방식이 더 효율적
- 테스트 코드를 보면 Member 인스턴스를 추가하는 것을 제외하곤 기존 단일 엔티티 클래스를 활용하는 방식과 동일

1_6. 단방향의 문제와 Fetch Join
- Member의 인스턴스는 Profile 인스턴스와 아무 관계가 없이 설정되어 있기 떄문에 단순 CRUD작업을 하기에는 편리하지만, 여러 문제 발생 가능
=> ex) 회원 정보를 조회하면서 회원의 현재 프로필 사진도 같이 보여주어야 하는 요구사항일 떄
- 회원 정보는 당연히 MemberRepository의 findById()를 이용해 처리할 수 있지만, 프로필 사진은 Member 인스턴스에서 알 수 없기 때문에 별도 처리 필요
- 해결책으로 ProfileRepository에 findByMember()와 같은 쿼리 메소드를 설계할 수 있지만, 좋은 방법X
- 만약 회원 정보가 리스트의 형태로 페이징 처리가 된다고 가정하면 한 페이지에 보이는 모든 Member인스턴스에 대해 ProfileRepository의 메소드를 호출하게 됨, 예를 들어 회원이 20명이라면 프로필 정보를 얻기 위해 20번의 SQL 실행
- 이 문제는 순수한 SQL을 이용했다면 INNER JOIN 또는 OUTER JOIN, 서브쿼리 등을 이용해 쉽게 처리 가능, 반면에 JPA를 이용할 때 많은 제약이 따름
- JPA에서는 'Fetch Join'이라는 기법을 통해 SQL에서 조인을 처리하는 것과 유사한 작업 처리 가능, 'Fetch Join'은 SQL과 달리 JPQL을 이용해 처리하는점이 다름

* JPA의 Join 처리
- @Query에서 사용하는 JPQL 자체가 테이블을 보는 것이 아니라, 클래스를 보고 작성하기 때문에 Hibernate 5.0.x의 경우 참조 관계가 없는 다른 엔티티를 사용하는 것은 불가능
- 반면 스프링부트 2.0 이상에서는 Hibernate 5.2.x 에서는 참조 관계까 없어도 'ON' 구문을 이용해 LEFT OUTER JOIN을 처리할 수 있음
- 예를 들어 uid가 'user1'인 회원의 정보와 더불어 회원의 프로필 사진 숫자를 알고 싶다 라는 요구사항일때 순수 SQL은 외부 조인을 이용
=> select member.uid, count(fname)
     from tbl_members member LEFT OUTER JOIN tbl_profile profile ON profile.member_uid = member.uid
     where member.uid = 'user1'
     group by member.uid;
- SQL을 보면 tbl_members와 tbl_profile 테이블을 연동해 처리해야 하므로 조인을 사용, member에는 데이터가 존재하지만, profile에는 데이터가 없는 경우도 존재할 수 있으므로 외부 조인으로 처리

* @Query 이용
- @Query 안의 JPQL의 경우 SQL과 유사하지만 테이블 대신 엔티티 클래스를 이용한다는 점이 차이점
- 메소드 리턴타입은 List<Object[]>로 처리, JPQL에서는 엔티티 타입뿐 아니라 다른 자료형들도 반환할 수 있기 때문에 List는 결과의 Row 수를 의미하고, Object[]는 칼럼들을 의미
[log]
Hibernate: select member0_.uid as col_0_0_, count(profile1_.fno) as col_1_0_ from tbl_members member0_ left outer join tbl_profile profile1_ on (member0_.uid=profile1_.member_uid) where member0_.uid=? group by member0_.uid
[user1, 4]

- 회원 정보와 현재 사용 중인 프로필에 대한 정보
[log]
Hibernate: select member0_.uid as uid1_0_0_, profile1_.fno as fno1_1_1_, member0_.uname as uname2_0_0_, member0_.upw as upw3_0_0_, profile1_.currnet as currnet2_1_1_, profile1_.fname as fname3_1_1_, profile1_.member_uid as member_u4_1_1_ from tbl_members member0_ left outer join tbl_profile profile1_ on (member0_.uid=profile1_.member_uid) where member0_.uid=? and profile1_.currnet=1
[Member(uid=user1, upw=pw1, uname=사용자1), Profile(fno=1, fname=face1jpg, currnet=true)]

2. 자료실과 첨부 파일의 관계 - 단방향2
- '단방향'으로 연관관계를 처리하는 경우에는 한쪽만 참조를 하기 때문에 일대다, 다대일에서 어느 쪽에 참조에 대한 설정을 두는지를 세심하게 결정해야함
- 앞의 예제의 경우 Member 클래스에는 Profile 참조가 없었고, Profile 에서는 Member를 참조하는 형태로 작성됨
- 단방향 설계이므로, 반대로 Member에서 Profile에 대한 참조를 이용하고, Profile에서는 참조를 하지 않는 설계 가능 (@JoinTable이라는 설정을 통해서)

2_1. 엔티티 클래스 작성
- 자료 클래스인 PDSBoard, 자료 첨부 파일 클래스인 PDSFile 작성 (PDSFile 클래스는 자료에 첨부된 파일을 의미하므로 파일 이름만 저장)

* 연관관계 설정
- 자료실의 자료와 첨부파일의 관계는 '일대다', '다대일' 관계이고 예제에서는 PDSBoard 쪽에서 단방향으로 연관관계를 설정  (자료 => 첨부파일)
- 단방향 연관관계 설정 후 프로젝트 실행
[log]
Hibernate: create table tbl_pds (pid bigint not null auto_increment, pname varchar(255), pwriter varchar(255), primary key (pid)) engine=InnoDB
Hibernate: create table tbl_pds_files (pdsboard_pid bigint not null, files_fno bigint not null) engine=InnoDB
Hibernate: create table tbl_pdsfiles (fno bigint not null auto_increment, pdsfile varchar(255), primary key (fno)) engine=InnoDB
Hibernate: alter table tbl_pds_files drop index UK_nm05n5xowin8j84umkgdurp2m
Hibernate: alter table tbl_pds_files add constraint UK_nm05n5xowin8j84umkgdurp2m unique (files_fno)
Hibernate: alter table tbl_pds_files add constraint FK3dqe4mgc5e3yjqyywo5krwo3v foreign key (files_fno) references tbl_pdsfiles (fno)
Hibernate: alter table tbl_pds_files add constraint FKcmo3meq4ytaectv8udhf1g0hv foreign key (pdsboard_pid) references tbl_pds (pid)
- 테이블이 예상과 달리 3개가 생성되는 것을 볼 수 있음, 그 중 tbl_pds와 tbl_pdsfiles는 엔티티 클래스 작성 시에 지정했지만 tbl_pds_files는 자동으로 생성됨
- 지정한 적 없던 테이블이 생성되는 이유는 @OneToMany를 데이터베이스가 어떻게 처리하는지 생각해 보면 알 수 있음 (데이터베이스의 칼럼은 기본적으로 하나의 값을 가지는 것이 정상적)
- 만일 tbl_pds에 칼럼이 생성된다면 여러 개의 tbl_pdsfiles의 fno를 저장해야 함 => 때문에 데이터베이스의 컬럼에 하나의 값이 아닌 여러 개 값을 저장해야 함
- 따라서 @OneToMany가 지정되면, JPA에서는 무조건 여러 개의 데이터를 저장하기 위해 별도 테이블을 생성하게 됨
- 단방향 @OneToMany에서 별도의 테이블이 생성되는 것이 싫다면, 별도 테이블 없이 특정 테이블을 조인할 것이라고 명시(@JoinTable)하거나 @JoinColumn을 명시해 기존 테이블을 이용해 조인한다고 표현해 줘야함
- @JoinTable은 자동으로 생성되는 테이블 대신 별도 이름을 가진 테이블을 생성하고자 할 때 사용하고, @JoinColumn은 이미 존재하는 테이블에 칼럼을 추가할 때 사용
- @ToString()을 변경하고, @JoinCoulmn을 이용해 PDSBoard 엔티티 클래스 수정
- 설정 후 실행하면 2개 테이블 생성, tbl_pdsfiles 테이블에 pdsno라는 이름의 칼럼이 추가됨
[log]
Hibernate: create table tbl_pds (pid bigint not null auto_increment, pname varchar(255), pwriter varchar(255), primary key (pid)) engine=InnoDB
Hibernate: create table tbl_pdsfiles (fno bigint not null auto_increment, pdsfile varchar(255), pdsno bigint, primary key (fno)) engine=InnoDB
Hibernate: alter table tbl_pdsfiles add constraint FK5cp1n7jygc9jg47y4cbmfwf8j foreign key (pdsno) references tbl_pds (pid)

* 연관관계에 따른 Repository
- 연관관계의 구조에 따라 Repository의 설계의 영향을 받음 (PDSFile의 경우 PDSBoard에 대한 참조가 없기 때문에 문제가 됨)
- PDSFile이 저장되는 tbl_pdsfiles 테이블에는 tbl_pds의 pid를 참조해서 값이 들어가야 함 (문제는 PDSFile 클래스에는 PDSBoard에 대한 참조가 없기 때문에 단독으로 처리X)
- 반면에 PDSBoard는 모든 PDSFile 객체들의 참조를 보관할 수 있으므로, 우너하는 모든 데이터에 대한 처리가 가능
- 이처럼 불평등한 관계를 처리하기 위해 각각 Repository를 생성하는 대신 'One'에 해당하는 엔티티 객체에 대한 Repository만 이용하는 것이 좋음

2_2. 등록과 Cascading 처리
- 먼저 새로운 자료가 등록될 때 자료와 첨부된 파일을 동시에 등록하는 경우를 테스트 (테스트java 작성)
- testInsertPDS()는 1개의 자료와 2개의 첨부파일을 저장하려고 시도, PDSBoardRepository이므로 실제 save()작업은 한 번만 호출, 하지만 에러가 뜸
- 이유는 JPA에서 한 번에 여러 엔티티 객체들의 상태를 변경해 주어야 하기 때문, 쉽게 말해 한 번에 PDSBoard 객체로 보관해야 하고, PDSFile의 상태도 보관해야만 하기 때문
- JPA에서는 처리하려는 엔티티 객체의 상태에 따라 종속적인 객체들의 영속성도 같이 처리되는 것을 '영속성 전이'라고 함
- '영속성 전이' 는 개념이 겉으로 보기엔 데이터베이스의 트랜잭션과 유사한 것 같지만, JPA에서는 메모리상의 객체가 엔티티 매니저의 컨텍스트에 들어가 '영속, 준영속, 비영속'등의 개념이 존재하기 때문에 더 복잡한 상태가 됨
- '영속성 전이' 는 부모 엔티티나 자식 엔티티의 상태 변화가 자신과 관련 있는 엔티티에 영향을 주는 것을 의미 (ex : 날짜, 일정)
* 종속적인 엔티티의 영속성 전이에 대한 설정
1) ALL : 모든 변경에 대해 전이
2) PERSIST : 저장 시에만 전이
3) MERGE : 병합 시에만 전이
4) REMOVE : 삭제 시에만 전이
5) REFRESH : 엔티티 매니저의 refresh() 호출 시 전이
6) DETACH : 부모 엔티티가 detach되면 자식 엔티티 역시 detach
- 영속성 전이에 대한 설정 중 ALL은 모든 엔티티의 상태 변화에 같이 처리되는 옵션이므로, 손쉽게 사용, PDSBoard에서 @OneToMAny속성에 cascade 속성 지정
- cascade 속성 지정 후 테스트 해보면 성공
[log]
Hibernate: insert into tbl_pds (pname, pwriter) values (?, ?)
Hibernate: insert into tbl_pdsfiles (pdsfile) values (?)
Hibernate: insert into tbl_pdsfiles (pdsfile) values (?)
Hibernate: update tbl_pdsfiles set pdsno=? where fno=?
Hibernate: update tbl_pdsfiles set pdsno=? where fno=?

2_3. 첨부파일 수정과 @Modifying, @Transactional
- 데이터베이스 처리를 위해 Repository의 존재가 필수적인데, 앞서 살펴본 예제와 같이 PDSBoardRepository만이 존재하여 첨부 파일의 이름만 수정해야 하는 상황에서 PDSFile에 대한 Repos가 존재X
- 이러한 경우에는 @Query를 이용해서 처리하면 편리
- @Query는 기본적으로 'select' 구문만 지원하지만 @Modifying을 이용해서 DML(insert, update, delete) 작업을 처리할 수 있음 (UPDATE FROM에서 FROM은 생략 가능)
- test()는 @Query를 이용해 'update..문'을 실행하는데, delete나 update를 사용하는 경우에는 반드시 @Transactional 처리를 필요로함
[log]
2020-09-03 22:02:39.503  INFO 21388 --- [           main] o.s.t.c.transaction.TransactionContext   : Began transaction (1) for test context ....
Hibernate: update tbl_pdsfiles set pdsfile=? where fno=?
2020-09-03 22:02:40.397  INFO 21388 --- [           main] org.zerock.PDSBoardTests                 : update count : 1
2020-09-03 22:02:40.415  INFO 21388 --- [           main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test:....
- 로그 마지막 부분을 보면 Rolled back transaction.... 이라고 출력되고 있는데 데이터베이스의 테이블을 보면 정상적으로 업데이트가 되지 않은 것을 확인할 수 있음
- 정상적 처리가 되었음에도 불구하고 데이터베이스의 최종 결과가 변경되지 않는 것은 @Transactional이 기본적으로 롤백 처리를 시도하기 때문
- 이러한 롤백 처리가 싫다면 test.java 선언부에 @Commit을 추가해 자동으로 commit 처리가 되도록 지정할 수 있음
[log]
Hibernate: update tbl_pdsfiles set pdsfile=? where fno=?
2020-09-03 22:30:41.440  INFO 10548 --- [           main] org.zerock.PDSBoardTests                 : update count : 1
2020-09-03 22:30:41.454  INFO 10548 --- [           main] o.s.t.c.transaction.TransactionContext   : Committed transaction for test...
* 순수한 객체를 통한 파일 수정
- @Query와 @Modifying을 이용하는 것이 편리하지만 필요한 경우에는 전통적인 접근 방식을 이용해 수정할 수도 있음
- 전통적 방식은 PDSBoardRepository에서 PDSBoard를 얻어온 후 내용물인 PDSFile을 수정하고 save()를 이용해 업데이트를 진행하는 것
- 테스트 코드의 내용은 PDSBoardRepository에서 pid가 2인 PDSBoard 객체를 얻는 것으로 시작
- findById()의 리턴 타입이 Optional<E>타입이기 때문에 IfPresent()를 이용해서 데이터가 존재한다면 어떠한 처리를 할 것인지 람다식으로 작성
- 추출한 PDSBoard에서 fno 값이 4번인 PDSFile 객체를 찾아내고, 첨부파일의 목록에서 삭제한 후 새로운 데이터를 추가, PDSFile 클래스는 fno 값으로 equals()와 hashcode()를 사용
- setFile()을 이용해서 새롭게 갱신된 첨부 파일의 목록을 설정하고, svae() 작업을 진행
[log]
Hibernate: select pdsboard0_.pid as pid1_1_0_, pdsboard0_.pname as pname2_1_0_, pdsboard0_.pwriter as pwriter3_1_0_ from tbl_pds pdsboard0_ where pdsboard0_.pid=?
2020-09-03 23:11:50.741  INFO 16964 --- [           main] org.zerock.PDSBoardTests                 : 데이터가 존재하므로 update 시도
Hibernate: select files0_.pdsno as pdsno3_2_0_, files0_.fno as fno1_2_0_, files0_.fno as fno1_2_1_, files0_.pdsfile as pdsfile2_2_1_ from tbl_pdsfiles files0_ where files0_.pdsno=?
Hibernate: update tbl_pdsfiles set pdsfile=? where fno=?
2020-09-03 23:11:50.903  INFO 16964 --- [           main] o.s.t.c.transaction.TransactionContext   : Committed transaction for test
- 실행된 SQL을 보면 tbl_pds 테이블에서 데이터를 조회하는 부분과 tbl_profiles 테이블에서 조회하는 부분이 별개로 실행됨 (JPA에서 연관관계의 테이블을 조회할 때 지연로딩(lazy loading) 때문)

2_4. 첨부 파일 삭제
- 수정과 마찬가지로 '자료'의 첨부 파일을 삭제하는 작업 역시 @Query 이용 또는 객체 접근 방식 사용가능, @Query를 이용하는 것이 훨씬 간단함
[log]
Hibernate: delete from tbl_pdsfiles where fno=?
2020-09-03 23:20:40.037  INFO 11036 --- [           main] org.zerock.PDSBoardTests                 : DELETE PDSFILE : 1

2_5. 조인 처리
- 실제 화면에서는 '특정 자료의 번호와 자료의 제목, 첨부파일의 수'를 같이 보여주어야 하는 상황이 있음 => @Query를 이용해 조인을 처리하여 해결
- insertDummies()는 100개의 자료와 200개의 파일 데이터를 추가, 기존 데이터 추가와 다른 점은 데이터를 save()하지 않고, List<PDSBoard>에 데이터들을 보관했다가, 한 번에 저장 하는 방식
- saveAll()을 이용해 한 번에 데이터를 처리하ㅣ게 되면 한 번에 여러 개의 데이터를 insert할 수 있음
[log]
Hibernate: insert into tbl_pds (pname, pwriter) values (?, ?)
Hibernate: insert into tbl_pdsfiles (pdsfile) values (?)
Hibernate: insert into tbl_pdsfiles (pdsfile) values (?)
...
- 앞서 단방향의 경우와 조금 다른점이라면 PDSBoard 객체의 files를 이용해 Outer Join을 처리하고 있다는 점 (조인)
- JPA를 이용해 객체를 설계할 때 단방향으로 설정하는 가장 큰 기준에 대해 여러 의견들이 존재 (데이터의 가공에 대한 고민이 우선)
- 앞의 예제들과 같이 단방향의 경우 한쪽의 객체만을 이용한다는 점은 편리하지만 조인이 필요한 경우에는 좀 더 신중히 고민

3. 게시물과 댓글의 관계 - 양방향
- 양방향 참조는 말 그대로 관계 있는 객체들의 참조를 양쪽에서 가지고 있는 것, 단방향에 비해 설정은 수월하지만 데이터 관리 측면에서는 조금 더 신경 써야 하는 점이 존재
- 게시물과 댓글의 관계는 전형적인 '일대다', '다대일', 앞의 예제들과 데이터베스상 관계는 동일하지만 JPA를 이용하는 경우에는 동일X, 양방향으로 처리하는 형태로 예제 작성

3_1. 연관관계의 설정
- 게시물과 댓글의 관계는 '일대다', '다대일'로 지정하고, 양방향으로 지정할 것이므로 FreeBoard 클래스와 FreeBoardReply 클래스에 상호 참조가 가능하도록 설정해야함
- FreeBoard 클래스는 ERD상의 선분으로 '일대다' 관계이므로 @OnetoMany를 이용해 지정
- FreeBoardReply는 '다대일'의 관계이므로 @ManyToOne을 지정
- 프로젝트를 실행 시키면 예상과 달리 3개의 테이블이 생성됨
[log]
Hibernate: create table tbl_free_replies (rno bigint not null auto_increment, reply varchar(255), replydate datetime, replyer varchar(255), updatedate datetime, board_bno bigint, primary key (rno)) engine=InnoDB
Hibernate: create table tbl_freeboards (bno bigint not null auto_increment, content varchar(255), regdate datetime, title varchar(255), updatedate datetime, writer varchar(255), primary key (bno)) engine=InnoDB
Hibernate: create table tbl_freeboards_replies (free_board_bno bigint not null, replies_rno bigint not null) engine=InnoDB
- 중간에 지정하지 않은 테이블 하나가 생성되는 이유는 @OneToMany에 있음, @OneToMany관계를 지정하려면 중간에 '다(Many)' 에 해당하는 정보를 보관하기 위해 JPA의 구현체는 별도 테이블을 생성하게됨

* mappedBy 속성
- 데이터베이스상에서 관계를 맺는 방법이 PK, FK만을 사용해 지정되지만, JPA에서 양쪽이 모두 참조를 사용하는 경우 어떤 쪽이 PK가 되고, 어떤 쪽이 FK가 되는지를 명시해 줄 필요가 있음
- JPA에서는 관계를 설정할 때 PK 쪽이 mappedBy라는 속성을 이용해 자신이 다른 객체에게 '매여있다' 는 것을 명시하게 됨, 조금 더 어려운 표현으로 '해당 엔티티가 관계의 주체가 되지 않는다는 것을 명시한다'고 함
- '매여있다'는 표현은 댓글이 있는 상태에서 게시글 삭제가 불가능하기 때문에 '게시글이 댓글에 매여있다'고 볼 수 있음 (FreeBoard..java에 @OneToMany에서 mappedBy 속성 추가)
- mappedBy는 '~에 매이게 된다'이므로 종속적인 클래스의 인스턴스 변수를 지정, 현재 Reply클래스에는 board라는 변수가 FreeBoard 인스턴스를 의미하므로, 이를 지정
[log]
Hibernate: create table tbl_free_replies (rno bigint not null auto_increment, reply varchar(255), replydate datetime, replyer varchar(255), updatedate datetime, board_bno bigint, primary key (rno)) engine=InnoDB
Hibernate: create table tbl_freeboards (bno bigint not null auto_increment, content varchar(255), regdate datetime, title varchar(255), updatedate datetime, writer varchar(255), primary key (bno)) engine=InnoDB
- tbl_free_replies 테이블을 보면 board_bno라는 이름의 칼럼이 추가된 것을 볼 수 있음

* 양방향 설정과 toString()
- Lombok을 이용해 toString()을 자동으로 처리하는 것은 편리하지만, 양방향 참조를 이용하는 경우에는 양쪽에서 toString()을 실행하기 때문에, 무한반복 실행하는 문제가 생김
- 양방향 참조일때 반드시 한쪽은 toString()에서 참조하는 객체를 출력하지 않도록 수정해야함 (@ToString에는 exclude 속성을 이용해 특정 인스턴스 변수를 제외시킬 수 있음)

3_2. Repository 작성
- 여러 엔티티들의 Repository 개수를 판단하는 데 가장 중요한 영향을 미치는 것은 엔티티 객체의 라이프사이클임
- 각 엔티티가 별도 라이프사이클을 가진다면 별도의 Repository를 생성하는 것이 좋고, 그렇지 못하다면 Repository 역시 달라짐
- 게시물의 작성과 댓글의 작성은 관계없이 별도로 이루어짐, 댓글 수정이나 삭제도 게시물 자체에는 영향을 주지 않으므로, 별도의 Repository로 작성하는것이 좋음

3_3. 테스트 코드
- 게시물과 댓글의 관계를 온전하게 처리하기 위해 여러가지 상황에 대해 테스트 해봐야함
* 게시물 등록과 댓글 추가
- 댓글이 존재하기 위해 반드시 게시물 데이터들이 존재해야 함 (게시물 등록하는 테스트 코드 작성)
- 게시물에 댓글을 추가하는 방식은 2가지 방식이 있음
1) 단방향에서 처리하듯이 FreeBoardReply를 생성하고 FreeBoard 자체는 새로 만들어서 bno속성만 지정하여 처리하는 방식
2) 양방향이므로 FreeBoard 객체를 얻어온 후 FreeBoardReply를 댓글 리스트에 추가한 후 FreeBoard 자체를 저장하는 방식 (2번 방식 이용)
- 이때 주의해야 할 점은 게시물이 저장될 때 댓글이 같이 저장되도록 caascading 처리(엔티티), 댓글 쪽에도 변경이 있기 대문에 트랜잭션 처리를 해줘야함(테스트)
[log]
Hibernate: select freeboard0_.bno as bno1_1_0_, freeboard0_.content as content2_1_0_, freeboard0_.regdate as regdate3_1_0_, freeboard0_.title as title4_1_0_, freeboard0_.updatedate as updateda5_1_0_, freeboard0_.writer as writer6_1_0_ from tbl_freeboards freeboard0_ where freeboard0_.bno=?
Hibernate: insert into tbl_free_replies (board_bno, reply, replydate, replyer, updatedate) values (?, ?, ?, ?, ?)
- 단방향 처리
[log]
Hibernate: insert into tbl_free_replies (board_bno, reply, replydate, replyer, updatedate) values (?, ?, ?, ?, ?)
- 양방향일 때는 어떤 댓글이 존재하는지 확인 해야하기 때문에 select 실행 후 insert 실행, 단방향일때는 insert만 실행

3_4. 게시물의 페이징 처리와 @Query
- 양방향 처리는 하나의 엔티티 객체를 이용해 다른 엔티티를 서로 참조하는 관계이므로 단방향의 제한적인 접근에 비해 운용의 폭이 넓음
- 다만, 양방향으로 원하는 데이터들을 얻을 수 있다고 하더라도, 최종적으로 실행되는 SQL이 성능에 나쁜 영향을 주는지를 항상 체크 해야함
- 게시물과 댓글의 관계에서 자주 사용하는 것은 페이징 처리이므로, 다음과 같은 상황을 작성
1) 쿼리 메소드를 이용하는 경우의 '게시물 + 댓글의 수'
2) @Query를 이용하는 경우의 '게시물 + 댓글의 수'

* 쿼리 메소드를 이용하는 경우
- 일반적으로 게시물은 게시물 번호의 역순으로 페이징 처리가 됨
- 현재 FreeBoard의 객체는 댓글에 대한 리스트를 참조하고 있으므로, 테스트 코드에서는 페이징 처리에 관련된 정보뿐 아니라 댓글의 수도 파악가능
[log]
Hibernate: select freeboard0_.bno as bno1_1_, freeboard0_.content as content2_1_, freeboard0_.regdate as regdate3_1_, freeboard0_.title as title4_1_, freeboard0_.updatedate as updateda5_1_, freeboard0_.writer as writer6_1_ from tbl_freeboards freeboard0_ where freeboard0_.bno>? order by freeboard0_.bno desc limit ?
2020-09-06 03:18:37.680  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 199 : Free Board ...199
2020-09-06 03:18:37.681  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 198 : Free Board ...198
2020-09-06 03:18:37.681  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 197 : Free Board ...197
2020-09-06 03:18:37.681  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 196 : Free Board ...196
2020-09-06 03:18:37.681  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 195 : Free Board ...195
2020-09-06 03:18:37.681  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 194 : Free Board ...194
2020-09-06 03:18:37.682  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 193 : Free Board ...193
2020-09-06 03:18:37.682  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 192 : Free Board ...192
2020-09-06 03:18:37.682  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 191 : Free Board ...191
2020-09-06 03:18:37.682  INFO 11016 --- [           main] org.zerock.FreeBoardTest                 : 190 : Free Board ...190
- 실행된 SQL을 보면 페이징 처리를 하기 위해 tbl_freeboards만 이용하는 것을 볼 수 있음

* 지연 로딩 (lazy loading)
- 일반적인 게시물의 리스트 처리에서는 게시물의 '제목'옆에 댓글 수가 표시됨 (테스트 코드 작성)
- 댓글 수를 출력하기 위해 board.getReplies().size()를 호출했지만 오류발생
- JPA는 연관관계가 있는 엔티티를 조회할 때 기본적으로 '지연 로딩'이라는 방식을 이용함
- '지연 로딩'이란 말 그대로 '게으른'이라는 의미로 정보가 필요하기 전까지는 최대한 테이블에 접근하지 않는 방식을 의미
- 지연 로딩을 하는 큰 이유는 성능때문, 하나의 엔티티가 여러 엔티티들과 종속적 관계를 맺고 있다면, SQL에서는 조인을 이용하는데, 조인이 복잡해질수록 성능이 저하되기 때문에 JPA에서는 연관관계의 Collection타입을 처리할 때 지연로딩 사용
- 지연 로딩의 반대 개념은 '즉시 로딩(eager loading)', 즉시 로딩은 일반적으로 조인을 이용해 필요한 모든 정보를 처리하게 됨
- 즉시 로딩을 사용하려면 @OneToMany에 'fetch'라는 속성값으로 'FetchType.EAGER'를 지정
- 즉시 로딩을 사용하는 형태로 변경한 후 기존 테스트 코드를 실행하면 에러가 나오지 않고 정상적인 결과가 나옴
[log]
Hibernate: select freeboard0_.bno as bno1_1_, freeboard0_.content as content2_1_, freeboard0_.regdate as regdate3_1_, freeboard0_.title as title4_1_, freeboard0_.updatedate as updateda5_1_, freeboard0_.writer as writer6_1_ from tbl_freeboards freeboard0_ where freeboard0_.bno>? order by freeboard0_.bno desc limit ?
Hibernate: select replies0_.board_bno as board_bn6_0_0_, replies0_.rno as rno1_0_0_, replies0_.rno as rno1_0_1_, replies0_.board_bno as board_bn6_0_1_, replies0_.reply as reply2_0_1_, replies0_.replydate as replydat3_0_1_, replies0_.replyer as replyer4_0_1_, replies0_.updatedate as updateda5_0_1_ from tbl_free_replies replies0_ where replies0_.board_bno=?
Hibernate: select replies0_.board_bno as board_bn6_0_0_, replies0_.rno as rno1_0_0_, replies0_.rno as rno1_0_1_, replies0_.board_bno as board_bn6_0_1_, replies0_.reply as reply2_0_1_, replies0_.replydate as replydat3_0_1_, replies0_.replyer as replyer4_0_1_, replies0_.updatedate as updateda5_0_1_ from tbl_free_replies replies0_ where replies0_.board_bno=?
....
2020-09-06 15:59:58.981  INFO 7040 --- [           main] org.zerock.FreeBoardTest                 : 199: Free Board ...199: 1
2020-09-06 15:59:58.983  INFO 7040 --- [           main] org.zerock.FreeBoardTest                 : 198: Free Board ...198: 1
2020-09-06 15:59:58.983  INFO 7040 --- [           main] org.zerock.FreeBoardTest                 : 197: Free Board ...197: 0
2020-09-06 15:59:58.985  INFO 7040 --- [           main] org.zerock.FreeBoardTest                 : 196: Free Board ...196: 0
2020-09-06 15:59:58.986  INFO 7040 --- [           main] org.zerock.FreeBoardTest                 : 195: Free Board ...195: 0
....
- 실행되는 SQL을 보면 우선은 페이지의 목록을 처리하는 SQL이 실행되고, 이후 각 게시물에 대해 'select'가 이루어지는 것을 볼 수 있음
- 따라서 실제로 결과가 나오기 위해 1번의 목록을 추출하는 SQL과 10번의 조회용 SQL이 실행되기 때문에 권장할 수 있는 방법X
- 위와 같이 성능에 영향을 줄 수 있는 즉시 로딩을 이용하는 것은 주의할 필요가 있음, 지연 로딩과 즉시 로딩을 사용할 때에는 반드시 해당 작업을 위해 어떠한 SQL들이 실행되는지를 체크해야함
- 지연 로딩을 이용하면서 댓글을 같이 가져오고 싶다면 @Transactional을 이용해 처리해 주어야 함
[log]
Hibernate: select freeboard0_.bno as bno1_1_, freeboard0_.content as content2_1_, freeboard0_.regdate as regdate3_1_, freeboard0_.title as title4_1_, freeboard0_.updatedate as updateda5_1_, freeboard0_.writer as writer6_1_ from tbl_freeboards freeboard0_ where freeboard0_.bno>? order by freeboard0_.bno desc limit ?
Hibernate: select replies0_.board_bno as board_bn6_0_0_, replies0_.rno as rno1_0_0_, replies0_.rno as rno1_0_1_, replies0_.board_bno as board_bn6_0_1_, replies0_.reply as reply2_0_1_, replies0_.replydate as replydat3_0_1_, replies0_.replyer as replyer4_0_1_, replies0_.updatedate as updateda5_0_1_ from tbl_free_replies replies0_ where replies0_.board_bno=?
2020-09-06 16:08:31.445  INFO 17004 --- [           main] org.zerock.FreeBoardTest                 : 199: Free Board ...199: 1
Hibernate: select replies0_.board_bno as board_bn6_0_0_, replies0_.rno as rno1_0_0_, replies0_.rno as rno1_0_1_, replies0_.board_bno as board_bn6_0_1_, replies0_.reply as reply2_0_1_, replies0_.replydate as replydat3_0_1_, replies0_.replyer as replyer4_0_1_, replies0_.updatedate as updateda5_0_1_ from tbl_free_replies replies0_ where replies0_.board_bno=?
2020-09-06 16:08:31.456  INFO 17004 --- [           main] org.zerock.FreeBoardTest                 : 198: Free Board ...198: 1
Hibernate: select replies0_.board_bno as board_bn6_0_0_, replies0_.rno as rno1_0_0_, replies0_.rno as rno1_0_1_, replies0_.board_bno as board_bn6_0_1_, replies0_.reply as reply2_0_1_, replies0_.replydate as replydat3_0_1_, replies0_.replyer as replyer4_0_1_, replies0_.updatedate as updateda5_0_1_ from tbl_free_replies replies0_ where replies0_.board_bno=?
2020-09-06 16:08:31.463  INFO 17004 --- [           main] org.zerock.FreeBoardTest                 : 197: Free Board ...197: 0
....
- 실행 결과를 보면 정상적으로 결과가 나오긴 하지만 이전과 마찬가지로 각 게시물마다 댓글을 가져오는 SQL이 실행되는 것을 볼 수 있음

* @Query와 Fetch Jooin을 이용한 처리
- 지연 로딩의 문제를 해결하는 가장 좋은 방법은 @Query를 이용해 조인 처리를 하는 것, Hibernate 5.2는 연관관계가 없는 엔티티 간에도 조인이 가능
- FreeBoard에 replies가 지연 로딩으로 처리되어 있는지 확인(default가 지연 로딩이므로 삭제해도 무방)
- FreeBoardRepository에는 @Query를 이용해 조인 처리
- @Query를 이용해서 엔티티의 일부 속성이나, 다른 엔티티를 조회할 때 리턴 타입은 컬랙션<배열>의 형태가 됨
- 이 경우 List<Object[]>에서 List는 결과 테이터의 '행(row)'를 의미하고 Object[]는 '열(column)'을 의미
[log]
Hibernate: select freeboard0_.bno as col_0_0_, freeboard0_.title as col_1_0_, count(replies1_.rno) as col_2_0_ from tbl_freeboards freeboard0_ left outer join tbl_free_replies replies1_ on freeboard0_.bno=replies1_.board_bno where freeboard0_.bno>0 group by freeboard0_.bno order by freeboard0_.bno desc limit ?
2020-09-06 16:57:38.379  INFO 936 --- [           main] org.zerock.FreeBoardTest                 : [199, Free Board ...199, 1]
2020-09-06 16:57:38.379  INFO 936 --- [           main] org.zerock.FreeBoardTest                 : [198, Free Board ...198, 1]
2020-09-06 16:57:38.379  INFO 936 --- [           main] org.zerock.FreeBoardTest                 : [197, Free Board ...197, 0]
2020-09-06 16:57:38.380  INFO 936 --- [           main] org.zerock.FreeBoardTest                 : [196, Free Board ...196, 0]
...
- 결과는 이전과 동일하지만 실행되는 SQL은 변경됨, 내부적으로 외부 조인을 이용해 한 번에 필요한 데이터들을 가져옴

3_5. 게시물 조회와 인덱스
- 게시물 조회의 경우 중요한 고민은 지연 로딩 or 즉시 로딩 이용?
- 지연 로딩은 필요할 때까지 댓글 관련 데이터를 로딩하지 않기 때문에 성능면에서는 장점이지만, 한 번에 게시물과 댓글을 같이 보여 주는 상황이라면, SQL이 한 번에 처리되지 않기 떄문에 여러 번 데이터베이스를 호출하는 문제가 있음
- 이에 대한 해결책은 지연 로딩을 그대로 이용하고, 댓글 쪽에서는 필요한 순간에 데이터가 좀 더 빨리 나올 수 있도록 신경 쓰는 방식임

* 인덱스 처리
- @Query를 이용해서 원하는 데이터만 처리할 수 있지만, 조금 더 신경 쓰려면 인덱스에 대한 고민을 해주는게 좋음
- 댓글 목록의 경우 특정한 게시물 번호에 영향을 받기 때문에 게시물 번호에 대한 인덱스를 생성해 두면 데이터가 많을 때 성능 향상을 기대할 수 있음
- @Table에는 인덱스를 설계할 때 @Index와 같이 사용해서 테이블 생성 시 인덱스가 설계되도록 지정할 수 있음
- 만일 이와 같이 설정된 상황에서 SQL 쿼리를 실행하고, 실행계획을 살펴보면 생성된 인덱스를 이용하는 모습을 확인할 수 있음




















