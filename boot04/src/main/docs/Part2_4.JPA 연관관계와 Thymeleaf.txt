#4. 다양한 연관관계 처리

* 연관관계 처리의 순서와 사전 설계
- 객체와 객체와의 관계를 처리하는 연관관계의 가장 흔한 예는 '게시물과 댓글'의 관계임
- 처리 순서
1) 필요한 각각의 클래스 정의
2) 각 클래스의 연관관계에 대한 설정 추가
 - '일대다', '다대다' 등의 연관관계 설정
 - 단방향, 양방향 설정
3) 데이터베이스상에 원하는 형태의 테이블이 만들어지는지 확인
4) 테스트 코드를 통해 정상작동하는지 확인
- JPA는 결과적으로 데이터베이스상에 테이블을 생성하기 때문에, 클래스상에 표현된 연관관계는 결국 데이터베이스 테이블간의 구조가 됨
- JPA를 이용하더라도 반드시 목적에 맞는 데이터베이스의 설계 능력이 있어야 함

* 관계형 데이터베이스의 설계와 JPA
- 일반적인 관계형 데이터베이스에서 설계 순서
1) 가장 중심이 되는 사람이나 명사를 결정하고, 이에 대한 구조를 대략적으로 설계
2) 1) 에서 생성된 데이터들이 상호작용을 하면서 만들어내는 새로운 데이터를 정의
3) 1), 2)를 다시 세분화해서 설계

* 중심이 되는 데이터 결정
- '쇼핑몰'을 예제로 들자면 여기서 가장 중요한 데이터는 '매출'인데 반드시 '회원'과 '상품' 데이터가 존재해야만 가능함
- 최종적으로 원하는 데이터는 '매출'이었지만 이를 위해 '회원'과 '상품'이라는 데이터는 반드시 필요
- 가장 중심이 되는 명사나 사람은 아무 사전 조건 없는 순수한 데이터가 됨
- 특징
1) 순수한 장부의 형태로 존재
2) 중심이 되는 데이터는 독립적인 라이프사이클을 유지
3) 고객의 요구사항에서 항상 모든 행위의 주어나 목적어가 됨
- 더미(dummy) 데이터를 설계해 주는 것이 좋음 (아무 의미를 가지지 않은 가짜 데이터), 가짜 데이터를 활용해 설계의 적합성이나 타당성을 검토하게 됨

* 중심 데이터 간의 상호 작용
- 중심이 되는 데이터들 사이에서 파생되는 데이터는 '동사'의 영역, '동사'에는 주로 중심이 되는 데이터들의 동작과 히스토리가 기록됨 (ex : '회원이 상품을 구매했다' or '회원의 상품 구매 히스토리' 와 같이 처리됨), 히스토리를 기록하기 위해 테이블 추가 가능
- '구매' 테이블은 '회원', '상품' 데이터가 존재하는 상태에서만 존재가 가능 (ex : user00회원이 p1, p2 상품을 구매하였다는 히스토리 기록)

* 연관관계의 설정
- 연관관계를 설정하는 방법은 어떤 데이터가 얼마나 중복해서 나타나는가를 세는 것만으로 모든 관계를 파악할 수 있음

* 전통적인 관계형 데이터베이스에서의 연관관계의 구분
- 일대일 (1 : 1)
- 일대다 (1 : M)
- 다대다 (M : N)
=> 데이터베이스의 설계 그림을 ERD, 전통적인 개발 방식에서는 먼저 ERD를 그려 데이터베이스의 설계를 작성하고, 테이블 생성 후 개발에 들어감

* JPA에서의 연관관계 구분
- 일대일 (@OneToOne)
- 일대다 (@OneToMany)
- 다대일 (@ManyToOne)
- 다대다 (@ManyToMany)
- 이와 더불어 JPA를 이용하는 경우에는 반드시 '방향'에 대한 설정이 필요
- 단방향(Unidirectional) 참조 : 한쪽 클래스만 다른 클래스의 인스턴스를 참조하도록 설정
- 양방향(Bidirectional) 참조 : 양쪽 클래스 모두 다른 클래스의 인스턴스를 참조
- 관계형 데이터베이스와 비교해보면 '일대다' 관계가 '일대다', '다대일'의 관꼐로 세분화 돼있는데 이것은 객체지향이라는 것이 상대적인 입장에서 관계를 파악할 수 있기 때문

* 예제의 개요
1) 회원과 프로필 사진들의 관계 (일대다, 다대일, 단방향)
2) 자료실과 첨부파일의 관계 (일대다, 다대일, 단방향)
3) 게시물과 댓글의 관계 (일대다, 다대일, 양방향)
=> 일대다, 다대일 관계가 가장 많이 사용하는 관계
1번 관계에서는 단방향의 참조를 '회원' <- '프로필'
2번 관계에서는 단방향의 참조를 '자료실' -> '첨부파일'
3번 관계에서는 양방향의 참조를 '게시물' <-> '댓글'
- 데이터베이스상에서는 동일한 관계지만 JPA를 이용하는 경우에는 각 상황에 따라 다른 방식의 접근이 필요, 각 방식의 장,단점 파악 필요

1. 회원과 프로필 사진의 관계 - 단방향 처리 1
- 데이터베이스상의 설꼐로 보면 회원과 프로필은 전형적인 '일대일' or '일대다'의 관계 (예제에서는 회원이 과거 프로필을 보관한다고 가정 => 일대다 관계)
- 한명의 회원이 여러 프로필을 가지고 있음, 그 중 하나의 사진을 현재 자신 프로필로 이용하는 경우에는 current 컬럼의 값이 true로 지정

1_1. 예제 프로젝트 작성
* Spring Data JPA를 이용할 때 개발 순서
1) 각 엔티티 클래스 설계
2) 각 엔티티 간의 연관관계 파악 및 설정
3) 단방향, 양방향 결정

* Spring boot 2.0 특징
- JDK1.8에서만 동작
- JPA의 구현체인 Hibernate의 버전이 5.2 버전, 최신 API 기능 활용, 식별키 생성 방식에 따라 5.0과 조금 다른 형태로 동작
- 스프링 프레임워크 버전 5.0
- Spring Data JPA의 버전 역시 변경되므로 API 사용방법이 조금 달라짐

* application.properties
- MySQL의 경우 데이터베이스의 엔진을 MyISAM과 InnoDB로 구분
- MyISAM은 예전부터 사용되던 엔진으로 속도면에서는 좀 더 나을 수 있지만, 데이터 무결성을 제대로 체크하지 않기 떄문에 최근에는 InnoDB를 권장
- spring.jpa.database-platform을 지정하지 않으면 기본적으로 MyISAM으로 지정되기 때문에, 이를 사용하기 위해 MySQL5InnoDBDialect를 명시적 지정, InnoDB가 아닌경우 외래키 대신 인덱스가 생성되므로 주의

1_2. 각각의 엔티티 클래스 설계
- 연관관계를 처리해야 한다고 해도 모든 연관관계를 맺을 엔티티 클래스가 존재해야 함, domain패키지에 'Member'와 'Profile'이라는 클래스 생성
- 생성한 Member와 Profile 클래스의 인스턴스 변수를 설계하는 과정에서는 순수하게 해당 엔티티가 가지는 속성만을 설계하고, 연관되어 있는 데이터들은 고려X
- 여기서 Member와 Profile에는 추가적인 속성들이 존재할 수 있음 (대표적으로 '최초 생성 시간'과 '최종 수정 시간'을 기록해주는 컬럼)
* GenerationType.AUTO와 GenerationType.INDENTITY
- 엔티티의 식별키를 처리하는 여러 방식 중 AUTO는 데이터베이스에 맞게 자동으로 식별키를 처리하는 방식으로 동작
- MySQL의 경우 스프링부트1.5.4버전일때는 컬럼이 auto_increament로 지정 되었지만 2버전부터는 hibernate_sequence라는 테이블을 생성하고 번호를 유지하는 방식으로 변경됨
- hibernate_sequence테이블은 자동으로 생성되는 모든 엔티티들이 공유하는 테이블이됨 (1,10,11 과 같이 비연속적인 데이터들이 생성될 수 있음)
- hibernate_sequence테이블이 존재하면 이 후 GenerationType.INDENTITY로 변경하더라도 auto_increament로 처리되지 않기 떄문에 테이블을 삭제한 후 다시 생성해야 함
- MySQL에서 GenerationType.INDENTITY를 이용하는 경우 반드시 hibernate_sequence 테이블이 존재하는지 확인 후 실제 테이블 생성 시 auto_increament가 처리되는지 확인

1_3. 연관관계의 설정과 단방향/양방향
- 회원과 프로필 관계는 '일대다', 프로필과 회원의 경우 '다대일' 관계라는것을 파악할 수 있음
- 관계형 데이터베이스에서는 단순히 하나의 FK를 이용해서 지정되는 상황이 JPA를 이용하는 복잡해진 상황
* 판단해야 할 것
1) '회원'에서 '프로필'로의 접근만 사용? - Member클래스에만 Profile타입의 인스턴스 변수 추가?
2) '프로필'을 통해 '회원' 정보를 조회할 필요? - Profile클래스에도 Member타입의 인스턴스 변수 추가?
=> 이러한 설정을 '단방향 / 양방향' 관계로 구분해줌
- '단방향'이란 일방 통행의 참조, 예를 들어 회원 정보를 통해서만 프로필 정보를 볼 수 있는 구조
- '양방향'은 프로필을 먼저 알아내고, 이를 통해 회원 정보를 알아내는 경우
- 회원과 프로필 관계를 보면 프로필 테이블에 회원 정보가 입력되어야 하므로, 가장 쉬운 구조는 'Profile' 클래스에 'Member' 클래스 타입을 인스턴스 변수로 설계
- Profile 클래스는 Member 타입의 member라는 인스턴스 변수를 추가 (회원 <=  프로필)
- Lombok의 @ToString에 exclude 속성을 이용해 Member에 관련된 toString()을 호출하지 않게 설정 
  (양방향으로 참조 설정했을 때 문제가 생길 수 있음, 양방향으로 참조하는 경우 Member의 toString()을 호출할 떄 Profile의 toString()을 호출하고, Proflie에서는 다시 Member의 toString()을 호출하기 때문에 무한히 반복될 수 있음)

* JPA의 연관관계 어노테이션 처리
-JPA에서의 연관관계를 크게 @OneToOne, @OneToMany, @ManyToOne, @ManyToMany의 어노테이션을 이용해서 처리 => 테이블 예상 구조를 생각하면서 결정
- Member와 Profile의 관계는 '일대다' 이지만, Profile과 Member의 관계는 '다대일'이므로 Profile 쪽에서 @ManyToOne 어노테이션 추가

* 생성된 테이블 구조 확인
- JPA의 연관관계 설정은 JPA를 이용할 떄 가장 중요하므로, 가능하면 연관관계를 맺은 후 프로젝트를 실행해서 올바른 구조로 생성되는지 확인해 주는 것이 좋음
- Aplication.java를 실행하면 다음과 같이 테이블의 구조와 제약 조건이 생성되는 것을 확인할 수 있음
Hibernate: create table tbl_members (uid varchar(255) not null, uname varchar(255), upw varchar(255), primary key (uid)) engine=InnoDB
Hibernate: create table tbl_profile (fno bigint not null auto_increment, currnet bit not null, fname varchar(255), member_uid varchar(255), primary key (fno)) engine=InnoDB
Hibernate: alter table tbl_profile add constraint FKhvsb89t46nv1one9hbodhrswo foreign key (member_uid) references tbl_members (uid)
=> 생성된 SQL을 보면 tbl_profile 테이블에 member_uid 라는 컬럼이 추가 되었고, alter table을 통해 FK가 생성되고, tbl_members의 uid 컬럼을 참조함

1_4. Repository 작성
- 연관관계의 설정에서 'Repository를 몇 개나 생성해야 하는지?' 잘 생각해야함
- 엔티티 클래스마다 Repository를 설계해 줄 수 있지만, 연관관계의 설정에 따라서 Repository를 설계할 필요가 없을 수도 있음
- Member와 Profile은 Member를 처리하는 Repository를 생성해서 회원 데이터를 처리하는 것이 명확
- 반면에 Profile을 저장할 때는 Member 객체를 통해 Profile을 처리할 수 없기 때문에 Profile을 처리하는 Repository를 설계하는것이 보편적

1_5. 테스트를 통한 검증
- 데이터베이스의 테이블 구조를 설계할 때 많은 수정 과정을 거치듯이 JPA를 이용해서 연관관계를 설정할 때도 이러한 과정이 필요
- 테스트 폴더에 Test.java 작성 (MemberRepository, ProfileRepository 주입)
- @Log는 Lombok의 로그를 사용할 때 이용하는 어노테이션, @Commit은 테스트 결과를 데이터베이스에 commit 하는 용도로 사용

* 더미 회원 데이터 추가
- 우선 프로필 데이터를 추가하기 전에 회원 데이터가 존재해야 하므로, testInsertMembers() 메소드를 작성해 데이터 추가
- testInsertMembers()는 100명의 회원 데이터를 생성, IntStream.range(1,101)을 이용하면 1부터 100까지 숫자를 생성, Java8버전에서는 forEach()와 연결해 for 루프와 같이 사용

* 특정 회원의 프로필 데이터 처리
- Profile 데이터는 반드시 Member 객체에 대한 참조가 필요
- 이 작업을 하는 방식은 MemberRepository를 이용해 실제 Member 객체를 가져와서 처리할 수 있지만, Member를 읽고 난 후 Profile을 읽어야 하기 때문에 좋은 방법X
- Member의 식별자인 uid 속성을 가져오기 위해 Member 객체만 잠시 생성하는 방식이 더 효율적
- 테스트 코드를 보면 Member 인스턴스를 추가하는 것을 제외하곤 기존 단일 엔티티 클래스를 활용하는 방식과 동일

1_6. 단방향의 문제와 Fetch Join
- Member의 인스턴스는 Profile 인스턴스와 아무 관계가 없이 설정되어 있기 떄문에 단순 CRUD작업을 하기에는 편리하지만, 여러 문제 발생 가능
=> ex) 회원 정보를 조회하면서 회원의 현재 프로필 사진도 같이 보여주어야 하는 요구사항일 떄
- 회원 정보는 당연히 MemberRepository의 findById()를 이용해 처리할 수 있지만, 프로필 사진은 Member 인스턴스에서 알 수 없기 때문에 별도 처리 필요
- 해결책으로 ProfileRepository에 findByMember()와 같은 쿼리 메소드를 설계할 수 있지만, 좋은 방법X
- 만약 회원 정보가 리스트의 형태로 페이징 처리가 된다고 가정하면 한 페이지에 보이는 모든 Member인스턴스에 대해 ProfileRepository의 메소드를 호출하게 됨, 예를 들어 회원이 20명이라면 프로필 정보를 얻기 위해 20번의 SQL 실행
- 이 문제는 순수한 SQL을 이용했다면 INNER JOIN 또는 OUTER JOIN, 서브쿼리 등을 이용해 쉽게 처리 가능, 반면에 JPA를 이용할 때 많은 제약이 따름
- JPA에서는 'Fetch Join'이라는 기법을 통해 SQL에서 조인을 처리하는 것과 유사한 작업 처리 가능, 'Fetch Join'은 SQL과 달리 JPQL을 이용해 처리하는점이 다름

* JPA의 Join 처리
- @Query에서 사용하는 JPQL 자체가 테이블을 보는 것이 아니라, 클래스를 보고 작성하기 때문에 Hibernate 5.0.x의 경우 참조 관계가 없는 다른 엔티티를 사용하는 것은 불가능
- 반면 스프링부트 2.0 이상에서는 Hibernate 5.2.x 에서는 참조 관계까 없어도 'ON' 구문을 이용해 LEFT OUTER JOIN을 처리할 수 있음
- 예를 들어 uid가 'user1'인 회원의 정보와 더불어 회원의 프로필 사진 숫자를 알고 싶다 라는 요구사항일때 순수 SQL은 외부 조인을 이용
=> select member.uid, count(fname)
     from tbl_members member LEFT OUTER JOIN tbl_profile profile ON profile.member_uid = member.uid
     where member.uid = 'user1'
     group by member.uid;
- SQL을 보면 tbl_members와 tbl_profile 테이블을 연동해 처리해야 하므로 조인을 사용, member에는 데이터가 존재하지만, profile에는 데이터가 없는 경우도 존재할 수 있으므로 외부 조인으로 처리

* @Query 이용
- @Query 안의 JPQL의 경우 SQL과 유사하지만 테이블 대신 엔티티 클래스를 이용한다는 점이 차이점
- 메소드 리턴타입은 List<Object[]>로 처리, JPQL에서는 엔티티 타입뿐 아니라 다른 자료형들도 반환할 수 있기 때문에 List는 결과의 Row 수를 의미하고, Object[]는 칼럼들을 의미
[log]
Hibernate: select member0_.uid as col_0_0_, count(profile1_.fno) as col_1_0_ from tbl_members member0_ left outer join tbl_profile profile1_ on (member0_.uid=profile1_.member_uid) where member0_.uid=? group by member0_.uid
[user1, 4]






























